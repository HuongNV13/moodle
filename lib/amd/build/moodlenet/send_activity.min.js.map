{"version":3,"file":"send_activity.min.js","sources":["../../src/moodlenet/send_activity.js"],"sourcesContent":["\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A module to handle Share operations of the MoodleNet.\n *\n * @module     core/moodlenet/send_activity\n * @copyright  2023 Huong Nguyen <huongnv13@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since      4.2\n */\n\nimport Config from 'core/config';\nimport ModalFactory from 'core/modal_factory';\nimport {displayException, addNotification} from 'core/notification';\nimport {get_string as getString} from 'core/str';\nimport Prefetch from \"core/prefetch\";\nimport * as Templates from 'core/templates';\nimport * as MoodleNetRepository from 'core/moodlenet/repository';\nimport SendActivityModal from 'core/moodlenet/send_activity_modal';\n\nconst TYPE_ACTIVITY = \"activity\";\n\nlet currentModal;\nlet siteSupportUrl;\n// eslint-disable-next-line no-unused-vars\nlet issuerId;\nlet courseId;\nlet cmId;\nlet shareFormat;\n\nconst delay = ms => new Promise(res => setTimeout(res, ms));\n\n/**\n * Handle send to MoodleNet\n * @param {int} issuerId\n * @param {int} courseId\n * @param {int} cmId\n * @param {int} shareFormat\n */\n// eslint-disable-next-line no-unused-vars\nconst sendToMoodleNet = async(issuerId, courseId, cmId, shareFormat) => {\n    window.moodleNetAuthorize = null;\n    const $modal = currentModal.getModal();\n    const modal = $modal[0];\n    modal.querySelector('.modal-header').classList.remove('no-border');\n    modal.querySelector('.modal-header').classList.add('no-header-text');\n\n    currentModal.setBody(Templates.render('core/moodlenet/send_activity_modal_packaging', {}));\n    currentModal.hideFooter();\n\n    await delay(2000);\n    MoodleNetRepository.sendActivity(issuerId, courseId, cmId, shareFormat).then(async(data) => {\n        window.console.log(data);\n        const status = data.status;\n        const resourceUrl = data.resourceurl;\n        responseFromMoodleNet(status, resourceUrl);\n    }).catch(displayException);\n};\n\n/**\n * Handle response from MoodleNet.\n * @param {boolean} status\n * @param {String} resourceUrl\n */\nconst responseFromMoodleNet = (status, resourceUrl = '') => {\n    const $modal = currentModal.getModal();\n    const modal = $modal[0];\n    modal.querySelector('.modal-header').classList.add('no-border');\n    currentModal.setBody(Templates.render('core/moodlenet/send_activity_modal_done', {\n        success: status,\n        sitesupporturl: siteSupportUrl,\n    }));\n\n    if (status) {\n        currentModal.setFooter(Templates.render('core/moodlenet/send_activity_modal_footer_view', {\n            resourseurl: resourceUrl,\n        }));\n        currentModal.showFooter();\n    }\n};\n\n/**\n * Moodle Authorize.\n * @param {int} issuerId\n */\nconst authorize = (issuerId) => {\n    return MoodleNetRepository.authorize(issuerId).then(async(data) => {\n        if (!data.status) {\n            // Need to login.\n            currentModal.setBody(Templates.render('core/moodlenet/send_activity_modal_authorize', {\n                'isauthorized': data.status,\n                'loginurl': data.loginurl,\n            }));\n            currentModal.hideFooter();\n        } else {\n            return sendToMoodleNet(issuerId, courseId, cmId, shareFormat);\n        }\n    }).catch(displayException);\n};\n\n/**\n * Register events.\n */\nconst registerEventListeners = () => {\n    document.addEventListener('click', e => {\n        const shareAction = e.target.closest('[data-action=\"sendtomoodlenet\"]');\n        const sendAction = e.target.closest('.moodlenet-action-buttons [data-action=\"share\"]');\n        const loginAction = e.target.closest('.moodlenet-share-modal-content [data-action=\"authorize\"]');\n        if (shareAction) {\n            e.preventDefault();\n            const type = shareAction.getAttribute('data-type');\n            const shareType = shareAction.getAttribute('data-sharetype');\n            const cmId = Config.contextInstanceId;\n            if (type == TYPE_ACTIVITY) {\n                MoodleNetRepository.getActivityInformation(cmId).then(async(data) => {\n                    if (data.status) {\n                        siteSupportUrl = data.supportpageurl;\n                        issuerId = data.issuerid;\n                        const modalPromise = ModalFactory.create({\n                            type: SendActivityModal.TYPE,\n                            large: true,\n                            templateContext: {\n                                'activitytype': data.type,\n                                'activityname': data.name,\n                                'sharetype': await getString('share_type_' + shareType, 'core_moodlenet'),\n                                'server': data.server,\n                            }\n                        });\n                        return modalPromise.then(modal => {\n                            currentModal = modal;\n                            modal.show();\n                            return modal;\n                        }).catch(displayException);\n                    } else {\n                        return addNotification({\n                            message: data.warnings[0].message,\n                            type: 'error'\n                        });\n                    }\n                }).catch(displayException);\n            }\n        }\n\n        if (sendAction) {\n            e.preventDefault();\n            courseId = Config.courseId;\n            cmId = Config.contextInstanceId;\n            shareFormat = 0;\n            authorize(issuerId);\n        }\n\n        if (loginAction) {\n            e.preventDefault();\n            window.moodleNetAuthorize = () => {\n                authorize(issuerId);\n            };\n            window.open(loginAction.getAttribute('data-url'), 'moodlenet_auth',\n                'location=0,status=0,width=500,height=300,scrollbars=yes');\n        }\n    });\n};\n\nexport const init = () => {\n    Prefetch.prefetchTemplates([\n        'core/moodlenet/send_activity_modal_base',\n    ]);\n    registerEventListeners();\n};\n"],"names":["currentModal","siteSupportUrl","issuerId","courseId","cmId","shareFormat","sendToMoodleNet","async","window","moodleNetAuthorize","modal","getModal","ms","querySelector","classList","remove","add","setBody","Templates","render","hideFooter","Promise","res","setTimeout","MoodleNetRepository","sendActivity","then","console","log","data","status","resourceUrl","resourceurl","responseFromMoodleNet","catch","displayException","$modal","success","sitesupporturl","setFooter","resourseurl","showFooter","authorize","loginurl","prefetchTemplates","document","addEventListener","e","shareAction","target","closest","sendAction","loginAction","preventDefault","type","getAttribute","shareType","Config","contextInstanceId","getActivityInformation","supportpageurl","issuerid","ModalFactory","create","SendActivityModal","TYPE","large","templateContext","name","server","show","message","warnings","open"],"mappings":";;;;;;;;gZAoCIA,aACAC,eAEAC,SACAC,SACAC,KACAC,kBAYEC,gBAAkBC,MAAML,SAAUC,SAAUC,KAAMC,eACpDG,OAAOC,mBAAqB,WAEtBC,MADSV,aAAaW,WACP,GAbXC,IAAAA,GAcVF,MAAMG,cAAc,iBAAiBC,UAAUC,OAAO,aACtDL,MAAMG,cAAc,iBAAiBC,UAAUE,IAAI,kBAEnDhB,aAAaiB,QAAQC,UAAUC,OAAO,+CAAgD,KACtFnB,aAAaoB,mBAlBHR,GAoBE,IApBI,IAAIS,SAAQC,KAAOC,WAAWD,IAAKV,OAqBnDY,oBAAoBC,aAAavB,SAAUC,SAAUC,KAAMC,aAAaqB,MAAKnB,MAAAA,OACzEC,OAAOmB,QAAQC,IAAIC,YACbC,OAASD,KAAKC,OACdC,YAAcF,KAAKG,YACzBC,sBAAsBH,OAAQC,gBAC/BG,MAAMC,iCAQPF,sBAAwB,SAACH,YAAQC,mEAAc,SAC3CK,OAASpC,aAAaW,WACtBD,MAAQ0B,OAAO,GACrB1B,MAAMG,cAAc,iBAAiBC,UAAUE,IAAI,aACnDhB,aAAaiB,QAAQC,UAAUC,OAAO,0CAA2C,CAC7EkB,QAASP,OACTQ,eAAgBrC,kBAGhB6B,SACA9B,aAAauC,UAAUrB,UAAUC,OAAO,iDAAkD,CACtFqB,YAAaT,eAEjB/B,aAAayC,eAQfC,UAAaxC,UACRsB,oBAAoBkB,UAAUxC,UAAUwB,MAAKnB,MAAAA,UAC3CsB,KAAKC,cAQCxB,gBAAgBJ,SAAUC,SAAUC,KAAMC,aANjDL,aAAaiB,QAAQC,UAAUC,OAAO,+CAAgD,cAClEU,KAAKC,gBACTD,KAAKc,YAErB3C,aAAaoB,gBAIlBc,MAAMC,8CAiEO,uBACPS,kBAAkB,CACvB,4CA5DJC,SAASC,iBAAiB,SAASC,UACzBC,YAAcD,EAAEE,OAAOC,QAAQ,mCAC/BC,WAAaJ,EAAEE,OAAOC,QAAQ,mDAC9BE,YAAcL,EAAEE,OAAOC,QAAQ,+DACjCF,YAAa,CACbD,EAAEM,uBACIC,KAAON,YAAYO,aAAa,aAChCC,UAAYR,YAAYO,aAAa,kBACrCnD,KAAOqD,gBAAOC,kBA5FV,YA6FNJ,MACA9B,oBAAoBmC,uBAAuBvD,MAAMsB,MAAKnB,MAAAA,MAC9CsB,KAAKC,QACL7B,eAAiB4B,KAAK+B,eACtB1D,SAAW2B,KAAKgC,SACKC,uBAAaC,OAAO,CACrCT,KAAMU,6BAAkBC,KACxBC,OAAO,EACPC,gBAAiB,cACGtC,KAAKyB,kBACLzB,KAAKuC,qBACF,mBAAU,cAAgBZ,UAAW,yBAC9C3B,KAAKwC,UAGH3C,MAAKhB,QACrBV,aAAeU,MACfA,MAAM4D,OACC5D,SACRwB,MAAMC,kCAEF,iCAAgB,CACnBoC,QAAS1C,KAAK2C,SAAS,GAAGD,QAC1BjB,KAAM,YAGfpB,MAAMC,gCAIbgB,aACAJ,EAAEM,iBACFlD,SAAWsD,gBAAOtD,SAClBC,KAAOqD,gBAAOC,kBACdrD,YAAc,EACdqC,UAAUxC,WAGVkD,cACAL,EAAEM,iBACF7C,OAAOC,mBAAqB,KACxBiC,UAAUxC,WAEdM,OAAOiE,KAAKrB,YAAYG,aAAa,YAAa,iBAC9C"}