{"version":3,"file":"mutations.min.js","sources":["../../src/moodlenet/mutations.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * MoodleNet mutations.\n * An instance of this class will be used to add custom mutations to the course editor.\n *\n * @module     core/moodlenet/mutations\n * @copyright  2023 Huong Nguyen <huongnv13@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since      4.2\n */\n\nimport DefaultMutations from 'core_courseformat/local/courseeditor/mutations';\nimport {getCurrentCourseEditor} from 'core_courseformat/courseeditor';\nimport CourseActions from 'core_courseformat/local/content/actions';\nimport * as MoodleNetService from 'core/moodlenet/service';\nimport Config from 'core/config';\nimport {exception as displayException} from 'core/notification';\nimport ModalFactory from 'core/modal_factory';\nimport SendActivityModal from 'core/moodlenet/send_activity_modal';\nimport {get_string as getString} from 'core/str';\n\nclass MoodleNetMutations extends DefaultMutations {\n\n    /**\n     * Share to MoodleNet.\n     *\n     * @param {StateManager} stateManager the current state manager\n     */\n    shareToMoodleNet = async function(stateManager) {\n        const course = stateManager.get('course');\n        window.console.log(course.id, stateManager.state.bulk.selection);\n\n        const resourceId = Config.contextInstanceId;\n        const infoPromise = MoodleNetService.getCourseInformation(resourceId);\n        infoPromise.then(async(data) => {\n            const modalPromise = ModalFactory.create({\n                type: SendActivityModal.TYPE,\n                large: true,\n                templateContext: {\n                    'activitytype': data.type,\n                    'activityname': data.name,\n                    'sharetype': await getString('moodlenet:sharetype' + 'course', 'moodle'),\n                    'server': data.server,\n                }\n            });\n            return modalPromise.then(modal => {\n                modal.show();\n                return modal;\n            }).catch(displayException);\n        }).catch(displayException);\n    };\n}\n\n/**\n * Initialize.\n */\nexport const init = () => {\n    const courseEditor = getCurrentCourseEditor();\n    courseEditor.addMutations(new MoodleNetMutations());\n    // Add direct mutation content actions.\n    CourseActions.addActions({\n        cmShareToMoodleNet: 'shareToMoodleNet'\n    });\n};\n"],"names":["MoodleNetMutations","DefaultMutations","async","stateManager","course","get","window","console","log","id","state","bulk","selection","resourceId","Config","contextInstanceId","MoodleNetService","getCourseInformation","then","ModalFactory","create","type","SendActivityModal","TYPE","large","templateContext","data","name","server","modal","show","catch","displayException","addMutations","addActions","cmShareToMoodleNet"],"mappings":"gxDAmCMA,2BAA2BC,6EAOVC,eAAeC,oBACxBC,OAASD,aAAaE,IAAI,UAChCC,OAAOC,QAAQC,IAAIJ,OAAOK,GAAIN,aAAaO,MAAMC,KAAKC,iBAEhDC,WAAaC,gBAAOC,kBACNC,iBAAiBC,qBAAqBJ,YAC9CK,MAAKhB,MAAAA,MACQiB,uBAAaC,OAAO,CACrCC,KAAMC,6BAAkBC,KACxBC,OAAO,EACPC,gBAAiB,cACGC,KAAKL,kBACLK,KAAKC,qBACF,mBAAU,4BAAkC,iBACrDD,KAAKE,UAGHV,MAAKW,QACrBA,MAAMC,OACCD,SACRE,MAAMC,2BACVD,MAAMC,oLAOG,MACK,0CACRC,aAAa,IAAIjC,qCAEhBkC,WAAW,CACrBC,mBAAoB"}