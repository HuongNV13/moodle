define("core/togglesensitive",["exports","core/pagehelpers","core/templates","core/pending","core/prefetch"],(function(_exports,_pagehelpers,_templates,_pending,_prefetch){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}
/**
   * JS module for toggling the sensitive input visibility (e.g. passwords, keys).
   *
   * @module     core/togglesensitive
   * @copyright  2023 David Woloszyn <david.woloszyn@moodle.com>
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.init=void 0,_templates=_interopRequireDefault(_templates),_pending=_interopRequireDefault(_pending),_prefetch=_interopRequireDefault(_prefetch);const SELECTORS_BUTTON=".toggle-visibility-btn",PIX_EYE="t/hide",PIX_EYE_SLASH="t/show";let sensitiveElementId,sensitiveInputHTML;_exports.init=(elementId,isSmallScreensOnly)=>{_prefetch.default.prefetchTemplate("core/form_sensitive_with_toggle"),void 0===isSmallScreensOnly&&(isSmallScreensOnly=!0);const sensitiveInput=document.getElementById(elementId);null!==sensitiveInput&&(sensitiveElementId=elementId,renderToggleButton(sensitiveInput,isSmallScreensOnly).then((()=>window.console.log("Sensitive input toggle button rendered"))),registerListenerEvents(isSmallScreensOnly))};const renderToggleButton=async(sensitiveInput,isSmallScreensOnly)=>{sensitiveInputHTML=sensitiveInput.outerHTML;const{html:html}=await _templates.default.renderForPromise("core/form_sensitive_with_toggle",{smallscreensonly:isSmallScreensOnly,sensitiveInput:sensitiveInputHTML});sensitiveInput.outerHTML=html},registerListenerEvents=isSmallScreensOnly=>{document.addEventListener("click",handleButtonInteraction),isSmallScreensOnly&&window.addEventListener("resize",(()=>{if(!(0,_pagehelpers.isExtraSmall)()){const sensitiveInput=document.getElementById(sensitiveElementId),toggleButton=sensitiveInput.parentNode.querySelector(SELECTORS_BUTTON);toggleSensitiveVisibility(sensitiveInput,toggleButton,!0)}}))},handleButtonInteraction=event=>{const toggleButton=event.target.closest(SELECTORS_BUTTON);if(toggleButton){const sensitiveInput=document.getElementById(sensitiveElementId);toggleSensitiveVisibility(sensitiveInput,toggleButton)}},toggleSensitiveVisibility=(sensitiveInput,toggleButton,force)=>{const pendingPromise=new _pending.default("core/togglesensitive:toggle");let type,icon;void 0!==force&&!0===force?(type="password",icon=PIX_EYE):(type="password"===sensitiveInput.getAttribute("type")?"text":"password",icon="password"===sensitiveInput.getAttribute("type")?PIX_EYE_SLASH:PIX_EYE),sensitiveInput.setAttribute("type",type),_templates.default.renderPix(icon,"core").then((html=>{toggleButton.innerHTML=html,pendingPromise.resolve()}))}}));

//# sourceMappingURL=togglesensitive.min.js.map