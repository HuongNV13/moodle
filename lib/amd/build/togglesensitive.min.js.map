{"version":3,"file":"togglesensitive.min.js","sources":["../src/togglesensitive.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JS module for toggling the sensitive input visibility (e.g. passwords, keys).\n *\n * @module     core/togglesensitive\n * @copyright  2023 David Woloszyn <david.woloszyn@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {isExtraSmall} from 'core/pagehelpers';\nimport Templates from 'core/templates';\nimport Pending from 'core/pending';\nimport Prefetch from 'core/prefetch';\n\nconst SELECTORS = {\n    BUTTON: '.toggle-visibility-btn',\n    ICON: '.toggle-visibility-btn .icon',\n};\n\nconst PIX = {\n    EYE: 't/hide',\n    EYE_SLASH: 't/show',\n};\n\nlet sensitiveElementId;\nlet sensitiveInputHTML;\n\n/**\n * Entrypoint of the js.\n *\n * @method init\n * @param {String} elementId Form button element\n * @param {boolean} isSmallScreensOnly Is this for small screens?\n */\nexport const init = (elementId, isSmallScreensOnly) => {\n    Prefetch.prefetchTemplate('core/form_sensitive_with_toggle');\n    if (typeof isSmallScreensOnly === 'undefined') {\n        isSmallScreensOnly = true;\n    }\n    const sensitiveInput = document.getElementById(elementId);\n    if (sensitiveInput === null) {\n        // Exit early if invalid element id passed.\n        return;\n    }\n    sensitiveElementId = elementId;\n    // Render the sensitive input toggle button.\n    renderToggleButton(sensitiveInput, isSmallScreensOnly).then(() => {\n        return window.console.log('Sensitive input toggle button rendered');\n    });\n    registerListenerEvents(isSmallScreensOnly);\n};\n\nconst renderToggleButton = async(sensitiveInput, isSmallScreensOnly) => {\n    sensitiveInputHTML = sensitiveInput.outerHTML;\n    const {html} = await Templates.renderForPromise(\n        'core/form_sensitive_with_toggle',\n        {\n            smallscreensonly: isSmallScreensOnly,\n            sensitiveInput: sensitiveInputHTML,\n        }\n    );\n    sensitiveInput.outerHTML = html;\n};\n\n/**\n * Register event listeners.\n *\n * @method registerListenerEvents\n * @param {boolean} isSmallScreensOnly Is this for small screens?\n */\nconst registerListenerEvents = (isSmallScreensOnly) => {\n    // Toggle the sensitive input visibility when interacting with the toggle button.\n    document.addEventListener('click', handleButtonInteraction);\n    // For small screens only, hide all sensitive inputs when the screen is enlarged.\n    if (isSmallScreensOnly) {\n        window.addEventListener('resize', () => {\n            if (!isExtraSmall()) {\n                const sensitiveInput = document.getElementById(sensitiveElementId);\n                const toggleButton = sensitiveInput.parentNode.querySelector(SELECTORS.BUTTON);\n                toggleSensitiveVisibility(sensitiveInput, toggleButton, true);\n            }\n        });\n    }\n};\n\n/**\n * Handle events trigger by interacting with the toggle button.\n *\n * @method handleButtonInteraction\n * @param {Event} event The button event.\n */\nconst handleButtonInteraction = (event) => {\n    const toggleButton = event.target.closest(SELECTORS.BUTTON);\n    if (toggleButton) {\n        const sensitiveInput = document.getElementById(sensitiveElementId);\n        toggleSensitiveVisibility(sensitiveInput, toggleButton);\n    }\n};\n\n/**\n * Toggle the sensitive input visibility and its associated icon.\n *\n * @method togglesensitiveVisibility\n * @param {HTMLInputElement} sensitiveInput The sensitive input element.\n * @param {HTMLElement} toggleButton The icon element.\n * @param {boolean} force Force the display back to password.\n */\nconst toggleSensitiveVisibility = (sensitiveInput, toggleButton, force) => {\n    const pendingPromise = new Pending('core/togglesensitive:toggle');\n    let type;\n    let icon;\n    if (typeof force !== 'undefined' && force === true) {\n        type = 'password';\n        icon = PIX.EYE;\n    } else {\n        type = sensitiveInput.getAttribute('type') === 'password' ? 'text' : 'password';\n        icon = sensitiveInput.getAttribute('type') === 'password' ? PIX.EYE_SLASH : PIX.EYE;\n    }\n    sensitiveInput.setAttribute('type', type);\n    Templates.renderPix(icon, 'core').then((html) => {\n        toggleButton.innerHTML = html;\n        pendingPromise.resolve();\n        return;\n    });\n};\n"],"names":["SELECTORS","PIX","sensitiveElementId","sensitiveInputHTML","elementId","isSmallScreensOnly","prefetchTemplate","sensitiveInput","document","getElementById","renderToggleButton","then","window","console","log","registerListenerEvents","async","outerHTML","html","Templates","renderForPromise","smallscreensonly","addEventListener","handleButtonInteraction","toggleButton","parentNode","querySelector","toggleSensitiveVisibility","event","target","closest","force","pendingPromise","Pending","type","icon","getAttribute","setAttribute","renderPix","innerHTML","resolve"],"mappings":";;;;;;;4NA4BMA,iBACM,yBAINC,QACG,SADHA,cAES,aAGXC,mBACAC,iCASgB,CAACC,UAAWC,wCACnBC,iBAAiB,wCACQ,IAAvBD,qBACPA,oBAAqB,SAEnBE,eAAiBC,SAASC,eAAeL,WACxB,OAAnBG,iBAIJL,mBAAqBE,UAErBM,mBAAmBH,eAAgBF,oBAAoBM,MAAK,IACjDC,OAAOC,QAAQC,IAAI,4CAE9BC,uBAAuBV,4BAGrBK,mBAAqBM,MAAMT,eAAgBF,sBAC7CF,mBAAqBI,eAAeU,gBAC9BC,KAACA,YAAcC,mBAAUC,iBAC3B,kCACA,CACIC,iBAAkBhB,mBAClBE,eAAgBJ,qBAGxBI,eAAeU,UAAYC,MASzBH,uBAA0BV,qBAE5BG,SAASc,iBAAiB,QAASC,yBAE/BlB,oBACAO,OAAOU,iBAAiB,UAAU,UACzB,+BAAgB,OACXf,eAAiBC,SAASC,eAAeP,oBACzCsB,aAAejB,eAAekB,WAAWC,cAAc1B,kBAC7D2B,0BAA0BpB,eAAgBiB,cAAc,QAYlED,wBAA2BK,cACvBJ,aAAeI,MAAMC,OAAOC,QAAQ9B,qBACtCwB,aAAc,OACRjB,eAAiBC,SAASC,eAAeP,oBAC/CyB,0BAA0BpB,eAAgBiB,gBAY5CG,0BAA4B,CAACpB,eAAgBiB,aAAcO,eACvDC,eAAiB,IAAIC,iBAAQ,mCAC/BC,KACAC,UACiB,IAAVJ,QAAmC,IAAVA,OAChCG,KAAO,WACPC,KAAOlC,UAEPiC,KAA+C,aAAxC3B,eAAe6B,aAAa,QAAyB,OAAS,WACrED,KAA+C,aAAxC5B,eAAe6B,aAAa,QAAyBnC,cAAgBA,SAEhFM,eAAe8B,aAAa,OAAQH,yBAC1BI,UAAUH,KAAM,QAAQxB,MAAMO,OACpCM,aAAae,UAAYrB,KACzBc,eAAeQ"}