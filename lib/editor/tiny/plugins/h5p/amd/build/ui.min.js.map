{"version":3,"file":"ui.min.js","sources":["../src/ui.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny H5P Content configuration.\n *\n * @module      tiny_h5p/commands\n * @copyright   2022 Andrew Lyons <andrew@nicols.co.uk>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {\n    displayFilepicker,\n    getPluginConfiguration,\n} from 'editor_tiny/utils';\nimport {component} from './common';\n\nimport {getList} from 'core/normalise';\nimport {renderForPromise} from 'core/templates';\nimport Modal from 'tiny_h5p/modal';\nimport ModalEvents from 'core/modal_events';\nimport ModalFactory from 'core/modal_factory';\n\nexport const handleAction = (editor) => {\n    openingSelection = editor.selection.getNode();\n    displayDialogue(editor);\n};\n\nlet openingSelection = null;\n\n/**\n * Get the template context for the dialogue.\n *\n * @param {Editor} editor\n * @param {object} data\n * @returns {object} data\n */\nconst getTemplateContext = (editor, data) => {\n    const config = getPluginConfiguration(editor, 'h5p');\n\n    // TODO Tidy these up and simplify.\n    const permissions = {\n        canUpload: config.permissions?.upload ?? false,\n        canEmbed: config.permissions?.embed ?? false,\n    };\n\n    permissions.canUploadAndEmbed = permissions.canUpload && permissions.canEmbed;\n\n    // TODO Fill these - these are just placeholders.\n    const showOptions = {};\n    const optionDownloadButton = true;\n    const optionEmbedButton = true;\n    const optionCopyrightButton = true;\n    const fileURL = data?.url ?? '';\n\n    return Object.assign({}, {\n        elementid: editor.id,\n        canUpload: permissions.canUpload,\n        canEmbed: permissions.canEmbed,\n        canUploadAndEmbed: permissions.canUploadAndEmbed,\n        showOptions: showOptions,\n        fileURL: fileURL,\n        optionDownloadButton: optionDownloadButton,\n        optionEmbedButton: optionEmbedButton,\n        optionCopyrightButton: optionCopyrightButton,\n    }, data);\n};\n\n/**\n * Get the URL from the submitted form.\n *\n * @param {FormNode} form\n * @param {string} submittedUrl\n * @param {object} config\n * @returns {URL|null}\n */\nconst getUrlFromSubmission = (form, submittedUrl, config) => {\n    if (!submittedUrl) {\n        return null;\n    }\n\n    // Generate a URL Object for the submitted URL.\n    const url = new URL(submittedUrl);\n\n    if (config.permissions?.upload) {\n        if (form.querySelector('[name=\"download\"]').checked) {\n            url.searchParams.append('export', 1);\n        }\n    }\n\n    if (config.permissions?.embed) {\n        if (form.querySelector('[name=\"embed\"]').checked) {\n            url.searchParams.append('embed', 1);\n        }\n    }\n    if (form.querySelector('[name=\"copyright\"]').checked) {\n        url.searchParams.append('copyright', 1);\n    }\n\n    return url;\n};\n\nconst handleDialogueSubmission = async (editor, modal, data) => {\n    const config = getPluginConfiguration(editor, 'h5p');\n\n    const form = getList(modal.getRoot())[0].querySelector('form');\n    if (!form) {\n        // The form couldn't be found, which is weird.\n        // This should not happen.\n        // Display the dialogue again\n        displayDialogue(editor, Object.assign({}, data));\n        return;\n    }\n\n    // Get the URL from the submitted form.\n    const submittedUrl = form.querySelector('input[name=\"url\"]').value;\n    const url = getUrlFromSubmission(form, submittedUrl, config);\n\n    if (!url) {\n        // The URL is invalid.\n        // Fill it in and represent the dialogue with an error.\n        displayDialogue(editor, Object.assign({}, data, {\n            url: submittedUrl,\n            invalidUrl: true,\n        }));\n        return;\n    }\n\n\n    const content = await renderForPromise(`${component}/content`, {\n        url: url.toString(),\n    });\n\n    const currentPlaceholder = openingSelection.closest('.h5p-placeholder');\n    if (currentPlaceholder) {\n        const newPlaceholder = document.createElement('div');\n        newPlaceholder.innerHTML = content.html;\n        currentPlaceholder.replaceWith(...newPlaceholder.childNodes);\n    } else {\n        // TODO - Make this work better.\n        editor.selection.setContent(content.html);\n    }\n};\n\nconst getCurrentH5PData = (currentH5P) => {\n    const data = {};\n    let url;\n    try {\n        url = new URL(currentH5P.textContent);\n    } catch (error) {\n        return data;\n    }\n\n    if (url.searchParams.has('export')) {\n        data.download = true;\n        url.searchParams.delete('export');\n    }\n\n    if (url.searchParams.has('embed')) {\n        data.embed = true;\n        url.searchParams.delete('embed');\n    }\n\n    if (url.searchParams.has('copyright')) {\n        data.copyright = true;\n        url.searchParams.delete('copyright');\n    }\n\n    data.url = url.toString();\n\n    return data;\n};\n\nconst displayDialogue = async (editor, data = {}) => {\n    const selection = editor.selection.getNode();\n    const currentH5P = selection.closest('.h5p-placeholder');\n    if (currentH5P) {\n        Object.assign(data, getCurrentH5PData(currentH5P));\n    }\n\n    const modal = await ModalFactory.create({\n        type: Modal.TYPE,\n        templateContext: getTemplateContext(editor, data),\n        large: true,\n    });\n    modal.show();\n\n    const $root = modal.getRoot();\n    const root = $root[0];\n    $root.on(ModalEvents.save, (event, modal) => {\n        handleDialogueSubmission(editor, modal, data);\n    });\n\n    root.addEventListener('click', (e) => {\n        const filepickerButton = e.target.closest('[data-target=\"filepicker\"]');\n        if (filepickerButton) {\n            displayFilepicker(editor, 'h5p').then((params) => {\n                if (params.url !== '') {\n                    const input = root.querySelector('form input[name=\"url\"]');\n                    input.value = params.url;\n                }\n                return params;\n            })\n                .catch();\n        }\n    });\n};\n"],"names":["editor","openingSelection","selection","getNode","displayDialogue","getTemplateContext","data","config","permissions","canUpload","_config$permissions","upload","canEmbed","_config$permissions2","embed","canUploadAndEmbed","fileURL","url","Object","assign","elementid","id","showOptions","optionDownloadButton","optionEmbedButton","optionCopyrightButton","handleDialogueSubmission","async","modal","form","getRoot","querySelector","submittedUrl","value","URL","_config$permissions3","checked","searchParams","append","_config$permissions4","getUrlFromSubmission","invalidUrl","content","component","toString","currentPlaceholder","closest","newPlaceholder","document","createElement","innerHTML","html","replaceWith","childNodes","setContent","getCurrentH5PData","currentH5P","textContent","error","has","download","delete","copyright","ModalFactory","create","type","Modal","TYPE","templateContext","large","show","$root","root","on","ModalEvents","save","event","addEventListener","e","target","then","params","catch"],"mappings":"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"}