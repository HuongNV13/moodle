{"version":3,"file":"embed.min.js","sources":["../src/embed.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny Media plugin Embed class for Moodle.\n *\n * @module      tiny_media/embed\n * @copyright   2022 Huong Nguyen <huongnv13@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Templates from 'core/templates';\nimport {\n    get_string as getString,\n    get_strings as getStrings,\n} from 'core/str';\nimport * as ModalFactory from 'core/modal_factory';\nimport * as ModalEvents from 'core/modal_events';\nimport {displayFilepicker} from 'editor_tiny/utils';\nimport {getMoodleLang} from 'editor_tiny/options';\nimport {component} from \"./common\";\nimport Modal from './embedmodal';\nimport Selectors from 'tiny_media/selectors';\nimport {getEmbedPermissions} from 'tiny_media/options';\n\nexport const MediaEmbed = class {\n    editor = null;\n    canShowFilePicker = false;\n\n    constructor(editor) {\n        const permissions = getEmbedPermissions(editor);\n        this.canShowFilePicker = permissions.filepicker;\n        this.editor = editor;\n    }\n\n    async getTemplateContext(data) {\n        const [\n            addSourceHelpString,\n            tracksHelpString,\n            subtitlesHelpString,\n            captionsHelpString,\n            descriptionsHelpString,\n            chaptersHelpString,\n            metadataHelpString,\n        ] = await getStrings([\n            'addsource_help',\n            'tracks_help',\n            'subtitles_help',\n            'captions_help',\n            'descriptions_help',\n            'chapters_help',\n            'metadata_help',\n        ].map((key) => ({\n            key,\n            component,\n        })));\n\n        const languages = this.prepareMoodleLang();\n\n        return Object.assign({}, {\n            elementid: this.editor.getElement().id,\n            showfilepicker: this.canShowFilePicker,\n            addsourcehelpicon: {\n                text: addSourceHelpString,\n            },\n            trackshelpicon: {\n                text: tracksHelpString,\n            },\n            subtitleshelpicon: {\n                text: subtitlesHelpString,\n            },\n            captionshelpicon: {\n                text: captionsHelpString,\n            },\n            descriptionshelpicon: {\n                text: descriptionsHelpString,\n            },\n            chaptershelpicon: {\n                text: chaptersHelpString,\n            },\n            metadatahelpicon: {\n                text: metadataHelpString,\n            },\n            langsinstalled: languages.installed,\n            langsavailable: languages.available,\n            link: true,\n            video: false,\n            audio: false,\n        }, data);\n    }\n\n    async displayDialogue() {\n        let data = {};\n        const currentEmbedData = this.getCurrentEmbedData();\n        if (currentEmbedData) {\n            Object.assign(data, currentEmbedData);\n        }\n\n        const modal = await ModalFactory.create({\n            type: Modal.TYPE,\n            title: getString('createmedia', 'tiny_media'),\n            templateContext: await this.getTemplateContext(data),\n            removeOnClose: true,\n            large: true,\n        });\n\n        this.currentModal = modal;\n        await this.registerEventListeners(modal);\n        modal.show();\n    }\n\n    getCurrentEmbedData() {\n        const properties = this.getMediumProperties();\n        if (!properties) {\n            return false;\n        }\n\n        let processedProperties = {};\n        processedProperties[properties.type.toLowerCase()] = properties;\n        processedProperties.link = false;\n\n        return processedProperties;\n    }\n\n    getSelectedMedia() {\n        let mediaElm = this.editor.selection.getNode();\n\n        if (!mediaElm) {\n            return null;\n        }\n\n        if (mediaElm.nodeName.toLowerCase() === 'video' || mediaElm.nodeName.toLowerCase() === 'audio') {\n            return mediaElm;\n        }\n\n        if (mediaElm.querySelector('video')) {\n            return mediaElm.querySelector('video');\n        }\n\n        if (mediaElm.querySelector('audio')) {\n            return mediaElm.querySelector('audio');\n        }\n\n        return null;\n    }\n\n    getMediumProperties() {\n        const boolAttr = (elem, attr) => {\n            // As explained in MDL-64175, some OS (like Ubuntu), are removing the value for these attributes.\n            // So in order to check if attr=\"true\", we need to check if the attribute exists and if the value is empty or true.\n            return (elem.hasAttribute(attr) && (elem.getAttribute(attr) || elem.getAttribute(attr) === ''));\n        };\n\n        let tracks = {\n            subtitles: [],\n            captions: [],\n            descriptions: [],\n            chapters: [],\n            metadata: []\n        };\n        let sources = [];\n\n        const medium = this.getSelectedMedia();\n        if (!medium) {\n            return null;\n        }\n        medium.querySelectorAll('track').forEach(track => {\n            tracks[track.getAttribute('kind')].push({\n                src: track.getAttribute('src'),\n                srclang: track.getAttribute('srclang'),\n                label: track.getAttribute('label'),\n                defaultTrack: boolAttr(track, 'default')\n            });\n        });\n\n        medium.querySelectorAll('source').forEach(source => {\n            sources.push(source.src);\n        });\n\n        return {\n            type: medium.nodeName.toLowerCase() === 'video' ? Selectors.EMBED.mediaTypes.video : Selectors.EMBED.mediaTypes.audio,\n            sources: sources,\n            poster: medium.getAttribute('poster'),\n            title: medium.getAttribute('title'),\n            width: medium.getAttribute('width'),\n            height: medium.getAttribute('height'),\n            autoplay: boolAttr(medium, 'autoplay'),\n            loop: boolAttr(medium, 'loop'),\n            muted: boolAttr(medium, 'muted'),\n            controls: boolAttr(medium, 'controls'),\n            tracks: tracks\n        };\n    }\n\n    prepareMoodleLang() {\n        const moodleLangs = getMoodleLang(this.editor);\n        const currentLang = moodleLangs.currentlang;\n\n        const installed = Object.entries(moodleLangs.installed).map(([lang, code]) => ({\n            lang,\n            code,\n            \"default\": lang === currentLang,\n        }));\n\n        const available = Object.entries(moodleLangs.available).map(([lang, code]) => ({\n            lang,\n            code,\n            \"default\": lang === currentLang,\n        }));\n\n        return {\n            installed,\n            available,\n        };\n    }\n\n    getMoodleLangObj(subtitleLang) {\n        const {available} = getMoodleLang(this.editor);\n\n        if (available[subtitleLang]) {\n            return {\n                lang: subtitleLang,\n                code: available[subtitleLang],\n            };\n        }\n\n        return null;\n    }\n\n    filePickerCallback(params, element, fpType) {\n        if (params.url !== '') {\n            const tabPane = element.closest('.tab-pane');\n            element.closest(Selectors.EMBED.elements.source).querySelector(Selectors.EMBED.elements.url).value = params.url;\n\n            if (tabPane.id === this.editor.getElement().id + '_' + Selectors.EMBED.mediaTypes.link.toLowerCase()) {\n                tabPane.querySelector(Selectors.EMBED.elements.name).value = params.file;\n            }\n\n            if (fpType === 'subtitle') {\n                // If the file is subtitle file. We need to match the language and label for that file.\n                const subtitleLang = params.file.split('.vtt')[0].split('-').slice(-1)[0];\n                const langObj = this.getMoodleLangObj(subtitleLang);\n                if (langObj) {\n                    const track = element.closest(Selectors.EMBED.elements.track);\n                    track.querySelector(Selectors.EMBED.elements.trackLabel).value = langObj.lang.trim();\n                    track.querySelector(Selectors.EMBED.elements.trackLang).value = langObj.code;\n                }\n            }\n        }\n    }\n\n    addMediaSourceComponent(element, callback) {\n        const sourceElement = element.closest(Selectors.EMBED.elements.source + Selectors.EMBED.elements.mediaSource);\n        const clone = sourceElement.cloneNode(true);\n\n        sourceElement.querySelector('.removecomponent-wrapper').classList.remove('hidden');\n        sourceElement.querySelector('.addcomponent-wrapper').classList.add('hidden');\n\n        sourceElement.parentNode.insertBefore(clone, sourceElement.nextSibling);\n\n        if (callback) {\n            callback(clone);\n        }\n    }\n\n    removeMediaSourceComponent(element) {\n        const sourceElement = element.closest(Selectors.EMBED.elements.source + Selectors.EMBED.elements.mediaSource);\n        sourceElement.remove();\n    }\n\n    addTrackComponent(element, callback) {\n        const trackElement = element.closest(Selectors.EMBED.elements.track);\n        const clone = trackElement.cloneNode(true);\n\n        trackElement.querySelector('.removecomponent-wrapper').classList.remove('hidden');\n        trackElement.querySelector('.addcomponent-wrapper').classList.add('hidden');\n\n        trackElement.parentNode.insertBefore(clone, trackElement.nextSibling);\n\n        if (callback) {\n            callback(clone);\n        }\n    }\n\n    removeTrackComponent(element) {\n        const sourceElement = element.closest(Selectors.EMBED.elements.track);\n        sourceElement.remove();\n    }\n\n    getMediumTypeFromTabPane(tabPane) {\n        return tabPane.getAttribute('data-medium-type');\n    }\n\n    getTrackTypeFromTabPane(tabPane) {\n        return tabPane.getAttribute('data-track-kind');\n    }\n\n    getMediaHTML(form) {\n        const mediumType = this.getMediumTypeFromTabPane(form.querySelector('.root.tab-content > .tab-pane.active'));\n        const tabContent = form.querySelector(Selectors.EMBED.elements[mediumType.toLowerCase() + 'Pane']);\n\n        return this['getMediaHTML' + mediumType[0].toUpperCase() + mediumType.substr(1)](tabContent);\n    }\n\n    getMediaHTMLLink(tab) {\n        const context = {\n            url: tab.querySelector(Selectors.EMBED.elements.url).value,\n            name: tab.querySelector(Selectors.EMBED.elements.name).value || false\n        };\n\n        return context.url ? Templates.renderForPromise('tiny_media/embed_media_link', context) : '';\n    }\n\n    getMediaHTMLVideo(tab) {\n        const context = this.getContextForMediaHTML(tab);\n        context.width = tab.querySelector(Selectors.EMBED.elements.width).value || false;\n        context.height = tab.querySelector(Selectors.EMBED.elements.height).value || false;\n        context.poster = tab.querySelector(Selectors.EMBED.elements.posterSource + ' '\n            + Selectors.EMBED.elements.url).value || false;\n\n        return context.sources.length ? Templates.renderForPromise('tiny_media/embed_media_video', context) : '';\n    }\n\n    getMediaHTMLAudio(tab) {\n        let context = this.getContextForMediaHTML(tab);\n\n        return context.sources.length ? Templates.renderForPromise('tiny_media/embed_media_audio', context) : '';\n    }\n\n    getContextForMediaHTML(tab) {\n        const tracks = Array.from(tab.querySelectorAll(Selectors.EMBED.elements.track)).map(track => ({\n                track: track.querySelector(Selectors.EMBED.elements.trackSource + ' ' + Selectors.EMBED.elements.url).value,\n                kind: this.getTrackTypeFromTabPane(track.closest('.tab-pane')),\n                label: track.querySelector(Selectors.EMBED.elements.trackLabel).value ||\n                    track.querySelector(Selectors.EMBED.elements.trackLang).value,\n                srclang: track.querySelector(Selectors.EMBED.elements.trackLang).value,\n                defaultTrack: track.querySelector(Selectors.EMBED.elements.trackDefault).checked ? \"true\" : null\n        })).filter((track) => !!track.track);\n\n        const sources = Array.from(tab.querySelectorAll(Selectors.EMBED.elements.mediaSource + ' '\n            + Selectors.EMBED.elements.url))\n                .filter((source) => !!source.value)\n                .map((source) => source.value);\n\n        return {\n            sources,\n            description: tab.querySelector(Selectors.EMBED.elements.mediaSource + ' '\n                + Selectors.EMBED.elements.url).value || false,\n            tracks,\n            showControls: tab.querySelector(Selectors.EMBED.elements.mediaControl).checked,\n            autoplay: tab.querySelector(Selectors.EMBED.elements.mediaAutoplay).checked,\n            muted: tab.querySelector(Selectors.EMBED.elements.mediaMute).checked,\n            loop: tab.querySelector(Selectors.EMBED.elements.mediaLoop).checked,\n            title: tab.querySelector(Selectors.EMBED.elements.title).value || false\n        };\n    }\n\n    getFilepickerTypeFromElement(element) {\n        if (element.closest(Selectors.EMBED.elements.posterSource)) {\n            return 'image';\n        }\n        if (element.closest(Selectors.EMBED.elements.trackSource)) {\n            return 'subtitle';\n        }\n\n        return 'media';\n    }\n\n    async clickHandler(e) {\n        const element = e.target;\n\n        const mediaBrowser = element.closest(Selectors.EMBED.actions.mediaBrowser);\n        if (mediaBrowser) {\n            e.preventDefault();\n            const fpType = this.getFilepickerTypeFromElement(element);\n            const params = await displayFilepicker(this.editor, fpType);\n            this.filePickerCallback(params, element, fpType);\n        }\n\n        const addComponentSourceAction = element.closest(Selectors.EMBED.elements.mediaSource + ' .addcomponent');\n        if (addComponentSourceAction) {\n            e.preventDefault();\n            this.addMediaSourceComponent(element);\n        }\n\n        const removeComponentSourceAction = element.closest(Selectors.EMBED.elements.mediaSource + ' .removecomponent');\n        if (removeComponentSourceAction) {\n            e.preventDefault();\n            this.removeMediaSourceComponent(element);\n        }\n\n        const addComponentTrackAction = element.closest(Selectors.EMBED.elements.track + ' .addcomponent');\n        if (addComponentTrackAction) {\n            e.preventDefault();\n            this.addTrackComponent(element);\n        }\n\n        const removeComponentTrackAction = element.closest(Selectors.EMBED.elements.track + ' .removecomponent');\n        if (removeComponentTrackAction) {\n            e.preventDefault();\n            this.removeTrackComponent(element);\n        }\n\n        // Only allow one track per tab to be selected as \"default\".\n        const trackDefaultAction = element.closest(Selectors.EMBED.elements.trackDefault);\n        if (trackDefaultAction && trackDefaultAction.checked) {\n            const getKind = el => {\n                return this.getTrackTypeFromTabPane(el.parentElement.closest('.tab-pane'));\n            };\n\n            element.parentElement\n                .closest('.root.tab-content')\n                .querySelectorAll(Selectors.EMBED.elements.trackDefault)\n                .forEach(select => {\n                    if (select !== element && getKind(element) === getKind(select)) {\n                        select.checked = false;\n                    }\n                });\n        }\n    }\n\n    async handleDialogueSubmission(event, modal) {\n        const {html} = await this.getMediaHTML(modal.getRoot()[0]);\n        if (html) {\n            this.editor.insertContent(html);\n        }\n    }\n\n    async registerEventListeners(modal) {\n        await modal.getBody();\n        const $root = modal.getRoot();\n        const root = $root[0];\n        if (this.canShowFilePicker) {\n            root.addEventListener('click', this.clickHandler.bind(this));\n        }\n\n        $root.on(ModalEvents.save, this.handleDialogueSubmission.bind(this));\n        $root.on(ModalEvents.hidden, () => {\n            this.currentModal.destroy();\n        });\n        $root.on(ModalEvents.shown, () => {\n            root.querySelectorAll(Selectors.EMBED.elements.trackLang).forEach((dropdown) => {\n                const defaultVal = dropdown.getAttribute('data-value');\n                if (defaultVal) {\n                    dropdown.value = defaultVal;\n                }\n            });\n        });\n    }\n};\n"],"names":["constructor","editor","permissions","canShowFilePicker","filepicker","data","addSourceHelpString","tracksHelpString","subtitlesHelpString","captionsHelpString","descriptionsHelpString","chaptersHelpString","metadataHelpString","map","key","component","languages","this","prepareMoodleLang","Object","assign","elementid","getElement","id","showfilepicker","addsourcehelpicon","text","trackshelpicon","subtitleshelpicon","captionshelpicon","descriptionshelpicon","chaptershelpicon","metadatahelpicon","langsinstalled","installed","langsavailable","available","link","video","audio","currentEmbedData","getCurrentEmbedData","modal","ModalFactory","create","type","Modal","TYPE","title","templateContext","getTemplateContext","removeOnClose","large","currentModal","registerEventListeners","show","properties","getMediumProperties","processedProperties","toLowerCase","getSelectedMedia","mediaElm","selection","getNode","nodeName","querySelector","boolAttr","elem","attr","hasAttribute","getAttribute","tracks","subtitles","captions","descriptions","chapters","metadata","sources","medium","querySelectorAll","forEach","track","push","src","srclang","label","defaultTrack","source","Selectors","EMBED","mediaTypes","poster","width","height","autoplay","loop","muted","controls","moodleLangs","currentLang","currentlang","entries","_ref","lang","code","_ref2","getMoodleLangObj","subtitleLang","filePickerCallback","params","element","fpType","url","tabPane","closest","elements","value","name","file","split","slice","langObj","trackLabel","trim","trackLang","addMediaSourceComponent","callback","sourceElement","mediaSource","clone","cloneNode","classList","remove","add","parentNode","insertBefore","nextSibling","removeMediaSourceComponent","addTrackComponent","trackElement","removeTrackComponent","getMediumTypeFromTabPane","getTrackTypeFromTabPane","getMediaHTML","form","mediumType","tabContent","toUpperCase","substr","getMediaHTMLLink","tab","context","Templates","renderForPromise","getMediaHTMLVideo","getContextForMediaHTML","posterSource","length","getMediaHTMLAudio","Array","from","trackSource","kind","trackDefault","checked","filter","description","showControls","mediaControl","mediaAutoplay","mediaMute","mediaLoop","getFilepickerTypeFromElement","e","target","actions","mediaBrowser","preventDefault","trackDefaultAction","getKind","el","parentElement","select","event","html","getRoot","insertContent","getBody","$root","root","addEventListener","clickHandler","bind","on","ModalEvents","save","handleDialogueSubmission","hidden","destroy","shown","dropdown","defaultVal"],"mappings":"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"}