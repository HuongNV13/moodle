{"version":3,"file":"ui.min.js","sources":["../src/ui.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny AI UI.\n *\n * @module      tiny_aiplacement/ui\n * @copyright   2024 Matt Porritt <matt.porritt@moodle.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ModalEvents from 'core/modal_events';\nimport AiModal from 'tiny_aiplacement/modal';\nimport {getContextId} from 'tiny_aiplacement/options';\nimport Ajax from 'core/ajax';\nimport {loadingMessages} from 'tiny_aiplacement/loading';\n\nlet responseObj = null;\n\n/**\n * Display the modal when the AI button is clicked.\n *\n * @param {TinyMCE.editor} editor The tinyMCE editor instance.\n */\nexport const displayModal = async(editor) => {\n    const modalObject = await AiModal.create({\n        type: AiModal.TYPE,\n        templateContext: getTemplateContext(editor),\n        xlarge: true,\n    });\n\n    const modalroot = await modalObject.getRoot();\n    const root = modalroot[0];\n\n    modalObject.show();\n    modalroot.on(ModalEvents.hidden, () => {\n        modalObject.destroy();\n    });\n\n    // Add the event listener for the button click events.\n    root.addEventListener('click', (e) => {\n        const submitBtn = e.target.closest('[data-action=\"generate\"]');\n        const insertBtn = e.target.closest('[data-action=\"inserter\"]');\n        const cancelBtn = e.target.closest('[data-action=\"cancel\"]');\n        if (submitBtn) {\n            e.preventDefault();\n            handleSubmit(editor, root, submitBtn);\n        } else if (insertBtn) {\n            e.preventDefault();\n            handleInsert(editor, root);\n            modalObject.destroy();\n        } else if (cancelBtn) {\n            modalObject.destroy();\n        }\n    });\n\n    const generateBtn = root.querySelector('#' + editor.id + '_tiny_aiplacement_generatebutton');\n    const promptArea = root.querySelector('#' + editor.id + '_tiny_aiplacement_prompttext');\n\n    // Add the event listener for the prompt text area.\n    promptArea.addEventListener('input', () => {\n        // Enable the generate button if there is text in the prompt area.\n        // Disable the generate button if there is no text in the prompt area.\n        generateBtn.disabled = promptArea.value.trim() === '';\n    });\n};\n\n/**\n * Get the context to use in the modal template.\n *\n * @param {TinyMCE.editor} editor\n * @returns {Object}\n */\nconst getTemplateContext = (editor) => {\n    return {\n        elementid: editor.id,\n        modaltitle: 'Generate AI Content',\n    };\n};\n\n/**\n * Handle the submit action.\n *\n * @param {TinyMCE.editor} editor The tinyMCE editor instance.\n * @param {Object} root The root element of the modal.\n * @param {Object} submitBtn The submit button element.\n */\nconst handleSubmit = async(editor, root, submitBtn) => {\n    // Display the loading spinner.\n    displayLoading(editor.id, root, submitBtn);\n\n    // Get the context id.\n    const contextId = getContextId(editor);\n    const promptText = root.querySelector('#' + editor.id + '_tiny_aiplacement_prompttext').value;\n\n    // Pass the prompt text to the webservice using Ajax.\n    const request = {\n        methodname: 'tiny_aiplacement_generate_content',\n        args: {\n            contextid: contextId,\n            prompttext: promptText,\n            aspectratio: 'square',\n            quality: 'hd',\n            style: 'natural'\n        }\n    };\n\n    // Try making the ajax call and catch any errors.\n    try {\n        responseObj = await Ajax.call([request])[0];\n        window.console.log(responseObj);\n        const generatedResponseEl = root.querySelector('#' + editor.id + '_tiny_aiplacement_responsetext');\n        const insertBtn = root.querySelector('[data-action=\"inserter\"]');\n        generatedResponseEl.value = responseObj.generatedcontent;\n        generatedResponseEl.disabled = false;\n        hideLoading(editor.id, root, submitBtn);\n        insertBtn.classList.remove('hidden');\n\n    } catch (error) {\n        window.console.log(error);\n        // TODO: Display error message in modal.\n    }\n\n};\n\n/**\n * Display the loading action in the modal.\n *\n * @param {Integer} editorId The id of the editor.\n * @param {Object} root The root element of the modal.\n * @param {Object} submitBtn The submit button element.\n */\nconst displayLoading = (editorId, root, submitBtn) => {\n    const loadingSpinnerDiv = root.querySelector('#' + editorId + \"_tiny_aiplacement_spinner\");\n    const overlayDiv = root.querySelector('#' + editorId + '_tiny_aiplacement_overlay');\n    const blurDiv = root.querySelector('#' + editorId + '_tiny_aiplacement_blur');\n    const loadingTextDiv = root.querySelector('#' + editorId + \"_tiny_aiplacement_loading_text\");\n\n    loadingMessages(loadingTextDiv);\n    loadingSpinnerDiv.classList.remove('hidden');\n    overlayDiv.classList.remove('hidden');\n    blurDiv.classList.add('tiny-ai-blur');\n    submitBtn.innerHTML = 'Generating...';\n    submitBtn.disabled = true;\n};\n\n/**\n * Hide the loading action in the modal.\n *\n * @param {Integer} editorId The id of the editor.\n * @param {Object} root The root element of the modal.\n * @param {Object} submitBtn The submit button element.\n */\nconst hideLoading = (editorId, root, submitBtn) => {\n    const loadingSpinnerDiv = root.querySelector('#' + editorId + \"_tiny_aiplacement_spinner\");\n    const overlayDiv = root.querySelector('#' + editorId + '_tiny_aiplacement_overlay');\n    const blurDiv = root.querySelector('#' + editorId + '_tiny_aiplacement_blur');\n\n    loadingSpinnerDiv.classList.add('hidden');\n    overlayDiv.classList.add('hidden');\n    blurDiv.classList.remove('tiny-ai-blur');\n    submitBtn.innerHTML = 'Regenerate';\n    submitBtn.disabled = false;\n};\n\n/**\n * Handle the insert action.\n *\n * @param {TinyMCE.editor} editor The tinyMCE editor instance.\n * @param {Object} root The root element of the modal.\n */\nconst handleInsert = async(editor, root) => {\n    //TODO: Insert the generated content into the editor.\n    window.console.log(editor);\n    window.console.log(root);\n};\n"],"names":["responseObj","async","modalObject","AiModal","create","type","TYPE","templateContext","getTemplateContext","editor","xlarge","modalroot","getRoot","root","show","on","ModalEvents","hidden","destroy","addEventListener","e","submitBtn","target","closest","insertBtn","cancelBtn","preventDefault","handleSubmit","handleInsert","generateBtn","querySelector","id","promptArea","disabled","value","trim","elementid","modaltitle","displayLoading","request","methodname","args","contextid","prompttext","aspectratio","quality","style","Ajax","call","window","console","log","generatedResponseEl","generatedcontent","hideLoading","classList","remove","error","editorId","loadingSpinnerDiv","overlayDiv","blurDiv","loadingTextDiv","add","innerHTML"],"mappings":";;;;;;;4NA6BIA,YAAc,2BAOUC,MAAAA,eAClBC,kBAAoBC,eAAQC,OAAO,CACrCC,KAAMF,eAAQG,KACdC,gBAAiBC,mBAAmBC,QACpCC,QAAQ,IAGNC,gBAAkBT,YAAYU,UAC9BC,KAAOF,UAAU,GAEvBT,YAAYY,OACZH,UAAUI,GAAGC,sBAAYC,QAAQ,KAC7Bf,YAAYgB,aAIhBL,KAAKM,iBAAiB,SAAUC,UACtBC,UAAYD,EAAEE,OAAOC,QAAQ,4BAC7BC,UAAYJ,EAAEE,OAAOC,QAAQ,4BAC7BE,UAAYL,EAAEE,OAAOC,QAAQ,0BAC/BF,WACAD,EAAEM,iBACFC,aAAalB,OAAQI,KAAMQ,YACpBG,WACPJ,EAAEM,iBACFE,aAAanB,OAAQI,MACrBX,YAAYgB,WACLO,WACPvB,YAAYgB,mBAIdW,YAAchB,KAAKiB,cAAc,IAAMrB,OAAOsB,GAAK,oCACnDC,WAAanB,KAAKiB,cAAc,IAAMrB,OAAOsB,GAAK,gCAGxDC,WAAWb,iBAAiB,SAAS,KAGjCU,YAAYI,SAAuC,KAA5BD,WAAWE,MAAMC,iBAU1C3B,mBAAsBC,SACjB,CACH2B,UAAW3B,OAAOsB,GAClBM,WAAY,wBAWdV,aAAe1B,MAAMQ,OAAQI,KAAMQ,aAErCiB,eAAe7B,OAAOsB,GAAIlB,KAAMQ,iBAO1BkB,QAAU,CACZC,WAAY,oCACZC,KAAM,CACFC,WAPU,yBAAajC,QAQvBkC,WAPW9B,KAAKiB,cAAc,IAAMrB,OAAOsB,GAAK,gCAAgCG,MAQhFU,YAAa,SACbC,QAAS,KACTC,MAAO,gBAMX9C,kBAAoB+C,cAAKC,KAAK,CAACT,UAAU,GACzCU,OAAOC,QAAQC,IAAInD,mBACboD,oBAAsBvC,KAAKiB,cAAc,IAAMrB,OAAOsB,GAAK,kCAC3DP,UAAYX,KAAKiB,cAAc,4BACrCsB,oBAAoBlB,MAAQlC,YAAYqD,iBACxCD,oBAAoBnB,UAAW,EAC/BqB,YAAY7C,OAAOsB,GAAIlB,KAAMQ,WAC7BG,UAAU+B,UAAUC,OAAO,UAE7B,MAAOC,OACLR,OAAOC,QAAQC,IAAIM,SAarBnB,eAAiB,CAACoB,SAAU7C,KAAMQ,mBAC9BsC,kBAAoB9C,KAAKiB,cAAc,IAAM4B,SAAW,6BACxDE,WAAa/C,KAAKiB,cAAc,IAAM4B,SAAW,6BACjDG,QAAUhD,KAAKiB,cAAc,IAAM4B,SAAW,0BAC9CI,eAAiBjD,KAAKiB,cAAc,IAAM4B,SAAW,+DAE3CI,gBAChBH,kBAAkBJ,UAAUC,OAAO,UACnCI,WAAWL,UAAUC,OAAO,UAC5BK,QAAQN,UAAUQ,IAAI,gBACtB1C,UAAU2C,UAAY,gBACtB3C,UAAUY,UAAW,GAUnBqB,YAAc,CAACI,SAAU7C,KAAMQ,mBAC3BsC,kBAAoB9C,KAAKiB,cAAc,IAAM4B,SAAW,6BACxDE,WAAa/C,KAAKiB,cAAc,IAAM4B,SAAW,6BACjDG,QAAUhD,KAAKiB,cAAc,IAAM4B,SAAW,0BAEpDC,kBAAkBJ,UAAUQ,IAAI,UAChCH,WAAWL,UAAUQ,IAAI,UACzBF,QAAQN,UAAUC,OAAO,gBACzBnC,UAAU2C,UAAY,aACtB3C,UAAUY,UAAW,GASnBL,aAAe3B,MAAMQ,OAAQI,QAE/BoC,OAAOC,QAAQC,IAAI1C,QACnBwC,OAAOC,QAAQC,IAAItC"}