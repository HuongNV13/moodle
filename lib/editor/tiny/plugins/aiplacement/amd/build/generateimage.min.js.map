{"version":3,"file":"generateimage.min.js","sources":["../src/generateimage.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny AI generate images.\n *\n * @module      tiny_aiplacement/generateimage\n * @copyright   2024 Matt Porritt <matt.porritt@moodle.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ModalEvents from 'core/modal_events';\nimport ImageModal from 'tiny_aiplacement/imagemodal';\nimport Ajax from 'core/ajax';\nimport {getString} from 'core/str';\nimport Templates from 'core/templates';\nimport AiMediaImage from './mediaimage';\nimport {getContextId} from 'tiny_aiplacement/options';\nimport GenerateBase from 'tiny_aiplacement/generatebase';\n\nexport default class GenerateImage extends GenerateBase {\n\n    SELECTORS = {};\n\n    /**\n     * The modal configuration object.\n     * @type {{xlarge: boolean, type: *}}\n     */\n    static modalConfig = {\n        type: ImageModal.TYPE,\n        xlarge: true,\n    };\n\n    /**\n     * Class constructor.\n     *\n     * @param {TinyMCE.editor} editor The tinyMCE editor instance.\n     */\n    constructor(editor) {\n        super(editor);\n        this.imageURL = null;\n        this.SELECTORS = {\n            GENERATEBUTTON: `#${this.editor.id}_tiny_aiplacement_generatebutton`,\n            PROMPTAREA: `#${this.editor.id}_tiny_aiplacement_imageprompt`,\n            IMAGECONTAINER: `#${this.editor.id}_tiny_aiplacement_generate_image`,\n            FAIMAGE: `#${this.editor.id}_tiny_aiplacement_fa_image`,\n            FAIMAGE_TEXT: `#${this.editor.id}_tiny_aiplacement_fa_image_text`,\n            INSERTBTN: '[data-action=\"inserter\"]',\n            GENERATEDIMAGE: `#${this.editor.id}_tiny_generated_image`,\n        };\n    }\n\n    /**\n     * Set up the base image generation modal with default body content.\n     *\n     * @returns {ImageModal} The image modal object.\n     */\n    setupModal = async() => {\n        const modalObject = await ImageModal.create(GenerateImage.modalConfig);\n        const modalRoot = await modalObject.getRoot();\n\n        modalRoot.on(ModalEvents.hidden, () => {\n            modalObject.destroy();\n        });\n\n        return modalObject;\n    };\n\n    /**\n     * Set up the image modal.\n     *\n     * @param {ImageModal} modalObject The modal object.\n     * @param {object} templateContext The template context.\n     * @returns {Promise<void>} A promise that resolves when the modal is set up.\n     */\n    setupContentModal = async(modalObject, templateContext) => {\n        const [loadingBody, imageBody, imageFooter] = await Promise.all([\n            Templates.render('tiny_aiplacement/loading', templateContext),\n            Templates.render('tiny_aiplacement/modalbodyimage', templateContext),\n            Templates.render('tiny_aiplacement/modalfooterimage', templateContext)\n        ]);\n\n        modalObject.setBody(loadingBody + imageBody);\n        modalObject.setFooter(imageFooter);\n        this.addContentEventListeners(modalObject);\n    };\n\n    /**\n     * Handle click events within the image modal.\n     *\n     * @param {Event} e - The click event object.\n     * @param {ImageModal} modalObject - The image modal object.\n     * @param {HTMLElement} root - The root element of the modal.\n     */\n    handleContentModalClick = (e, modalObject, root) => {\n        const actions = {\n            generate: () => this.handleSubmit(root, e.target),\n            inserter: () => this.handleInsert(modalObject),\n            cancel: () => modalObject.destroy()\n        };\n\n        const actionKey = Object.keys(actions).find(key => e.target.closest(`[data-action=\"${key}\"]`));\n        if (actionKey) {\n            e.preventDefault();\n            actions[actionKey]();\n        }\n    };\n\n    /**\n     * Set up the prompt area in the modal, adding necessary event listeners.\n     *\n     * @param {HTMLElement} root - The root element of the modal.\n     */\n    setupPromptArea = (root) => {\n        const generateBtn = root.querySelector(this.SELECTORS.GENERATEBUTTON);\n        const promptArea = root.querySelector(this.SELECTORS.PROMPTAREA);\n\n        promptArea.addEventListener('input', () => {\n            generateBtn.disabled = promptArea.value.trim() === '';\n        });\n    };\n\n    /**\n     * Handle the submit action.\n     *\n     * @param {Object} root The root element of the modal.\n     * @param {Object} submitBtn The submit button element.\n     */\n    handleSubmit = async(root, submitBtn) => {\n        await this.displayLoading(root, submitBtn);\n\n        const displayArgs = this.getDisplayArgs(root);\n        const request = {\n            methodname: 'aiplacement_tinymce_generate_image',\n            args: displayArgs\n        };\n\n        try {\n            this.responseObj = await Ajax.call([request])[0];\n            if (this.responseObj.error) {\n                this.handleGenerationError(root, submitBtn, this.responseObj.error);\n            } else {\n                await this.displayGeneratedImage(root);\n                this.hideLoading(root, submitBtn);\n                window.console.log(this.responseObj);\n            }\n        } catch (error) {\n            this.handleGenerationError(root, submitBtn, '');\n        }\n    };\n\n    /**\n     * Handle the insert action.\n     *\n     * @param {Object} modalObject The modal object.\n     */\n    handleInsert = async(modalObject) => {\n        const mediaImage = new AiMediaImage(this.editor, this.imageURL, this.promptText);\n        await mediaImage.displayDialogue();\n        modalObject.destroy();\n    };\n\n    /**\n     * Handle a generation error.\n     *\n     * @param {Object} root The root element of the modal.\n     * @param {Object} submitBtn The submit button element.\n     * @param {String} errorMessage The error message to display.\n     */\n    handleGenerationError = async(root, submitBtn, errorMessage) => {\n        this.markError(root);\n        const faImageText = root.querySelector(this.SELECTORS.FAIMAGE_TEXT);\n        if (!errorMessage) {\n            errorMessage = await getString('errorgenimage', 'tiny_aiplacement');\n        }\n        faImageText.innerHTML = errorMessage;\n        this.hideLoading(root, submitBtn);\n    };\n\n    /**\n     * Display the generated image in the modal.\n     *\n     * @param {HTMLElement} root - The root element of the modal.\n     */\n    displayGeneratedImage = async(root) => {\n        // Clear any error messages.\n        this.unMarkError(root);\n\n        const imageDisplayContainer = root.querySelector(this.SELECTORS.IMAGECONTAINER);\n        const insertBtn = root.querySelector(this.SELECTORS.INSERTBTN);\n        // Set the draft URL as it's used elsewhere.\n        this.imageURL = this.responseObj.drafturl;\n\n        // Render the image template and insert it into the modal.\n        imageDisplayContainer.innerHTML = await Templates.render('tiny_aiplacement/image',\n            {url: this.responseObj.drafturl, elementid: this.editor.id});\n        const imagElement = root.querySelector(this.SELECTORS.GENERATEDIMAGE);\n\n        return new Promise((resolve, reject) => {\n            imagElement.onload = () => {\n                insertBtn.classList.remove('hidden');\n                resolve(); // Resolve the promise when the image is loaded.\n            };\n            imagElement.onerror = (error) => {\n                reject(error); // Reject the promise if there is an error loading the image.\n            };\n        });\n    };\n\n    /**\n     * Get the display args for the image.\n     *\n     * @param {Object} root The root element of the modal.\n     */\n    getDisplayArgs = (root) => {\n        const contextId = getContextId(this.editor);\n        const promptText = root.querySelector(this.SELECTORS.PROMPTAREA).value;\n        this.promptText = promptText;\n\n        const imageQualitySwitchId = `${this.editor.id}_image_quality_switch`;\n        const imageStyleSwitchId = `${this.editor.id}_image_style_switch`;\n\n        const aspectRatio = this.getSelectedRadioValue('aspect-ratio', 'square');\n        const imageQuality = this.getCheckboxValue(imageQualitySwitchId, false);\n        const imageStyle = this.getCheckboxValue(imageStyleSwitchId, false);\n\n        return {\n            contextid: contextId,\n            prompttext: promptText,\n            aspectratio: aspectRatio,\n            quality: imageQuality ? 'hd' : 'standard',\n            numimages: 1,\n            style: imageStyle ? 'vivid' : 'natural'\n        };\n    };\n\n    /**\n     * Get the value of a checkbox.\n     *\n     * @param {String} checkboxId The id of the checkbox.\n     * @param {Boolean} defaultValue The default value of the checkbox.\n     */\n    getCheckboxValue = (checkboxId, defaultValue = false) => {\n        const checkbox = document.getElementById(checkboxId);\n        return checkbox ? checkbox.checked : defaultValue;\n    };\n\n    /**\n     * Get the value of the selected radio button.\n     *\n     * @param {String} radioName The name of the radio button group.\n     * @param {String} defaultValue The default value of the radio button.\n     */\n    getSelectedRadioValue = (radioName, defaultValue = null) => {\n        const radios = document.getElementsByName(radioName);\n        for (const radio of radios) {\n            if (radio.checked) {\n                return radio.value;\n            }\n        }\n        return defaultValue;\n    };\n\n    /**\n     * Mark the image as an error.\n     * @param {HTMLElement} root The root element of the modal.\n     */\n    markError = (root) => {\n        const imageContainer = root.querySelector(this.SELECTORS.IMAGECONTAINER);\n        const faImage = root.querySelector(this.SELECTORS.FAIMAGE);\n\n        imageContainer.classList.add('alert-danger');\n        faImage.classList.add('fa-ban');\n        faImage.classList.remove('fa-image');\n    };\n\n    /**\n     * Unmark the image as an error.\n     * @param {HTMLElement} root The root element of the modal.\n     */\n    unMarkError = (root) => {\n        const imageContainer = root.querySelector(this.SELECTORS.IMAGECONTAINER);\n        const faImage = root.querySelector(this.SELECTORS.FAIMAGE);\n        const faImageText = root.querySelector(this.SELECTORS.FAIMAGE_TEXT);\n        imageContainer.classList.remove('alert-danger');\n        faImage.classList.remove('fa-ban');\n        faImage.classList.add('fa-image');\n        faImageText.innerHTML = '';\n    };\n}\n"],"names":["GenerateImage","GenerateBase","constructor","editor","async","modalObject","ImageModal","create","modalConfig","getRoot","on","ModalEvents","hidden","destroy","templateContext","loadingBody","imageBody","imageFooter","Promise","all","Templates","render","setBody","setFooter","addContentEventListeners","e","root","actions","generate","this","handleSubmit","target","inserter","handleInsert","cancel","actionKey","Object","keys","find","key","closest","preventDefault","generateBtn","querySelector","SELECTORS","GENERATEBUTTON","promptArea","PROMPTAREA","addEventListener","disabled","value","trim","submitBtn","displayLoading","request","methodname","args","getDisplayArgs","responseObj","Ajax","call","error","handleGenerationError","displayGeneratedImage","hideLoading","window","console","log","mediaImage","AiMediaImage","imageURL","promptText","displayDialogue","errorMessage","markError","faImageText","FAIMAGE_TEXT","innerHTML","unMarkError","imageDisplayContainer","IMAGECONTAINER","insertBtn","INSERTBTN","drafturl","url","elementid","id","imagElement","GENERATEDIMAGE","resolve","reject","onload","classList","remove","onerror","contextId","imageQualitySwitchId","imageStyleSwitchId","contextid","prompttext","aspectratio","getSelectedRadioValue","quality","getCheckboxValue","numimages","style","checkboxId","defaultValue","checkbox","document","getElementById","checked","radioName","radios","getElementsByName","radio","imageContainer","faImage","FAIMAGE","add","type","TYPE","xlarge"],"mappings":"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"}