{"version":3,"file":"generatetext.min.js","sources":["../src/generatetext.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny AI generate text.\n *\n * @module      tiny_aiplacement/generatetext\n * @copyright   2024 Matt Porritt <matt.porritt@moodle.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ModalEvents from 'core/modal_events';\nimport TextModal from 'tiny_aiplacement/textmodal';\nimport Ajax from 'core/ajax';\nimport {getString} from 'core/str';\nimport Templates from 'core/templates';\nimport {getContextId} from 'tiny_aiplacement/options';\nimport TinyAiTextMarker from 'tiny_aiplacement/textmark';\nimport GenerateBase from 'tiny_aiplacement/generatebase';\n\nexport default class GenerateText extends GenerateBase {\n\n    SELECTORS = {};\n\n    /**\n     * The modal configuration object.\n     * @type {{xlarge: boolean, type: *}}\n     */\n    static modalConfig = {\n        type: TextModal.TYPE,\n        xlarge: true,\n    };\n\n    /**\n     * Class constructor.\n     *\n     * @param {TinyMCE.editor} editor The tinyMCE editor instance.\n     */\n    constructor(editor) {\n        super(editor);\n        this.SELECTORS = {\n            GENERATEBUTTON: `#${this.editor.id}_tiny_aiplacement_generatebutton`,\n            PROMPTAREA: `#${this.editor.id}_tiny_aiplacement_textprompt`,\n            GENERATEDRESPONSE: '#' + this.editor.id + '_tiny_aiplacement_textresponse',\n        };\n    }\n\n\n    /**\n     * Set up the base text generation modal with default body content.\n     *\n     * @returns {TextModal} The image modal object.\n     */\n    setupModal = async() => {\n        const modalObject = await TextModal.create(GenerateText.modalConfig);\n        const modalRoot = await modalObject.getRoot();\n\n        modalRoot.on(ModalEvents.hidden, () => {\n            modalObject.destroy();\n        });\n\n        return modalObject;\n    };\n\n    /**\n     * Set up the text modal.\n     *\n     * @param {TextModal} modalObject The modal object.\n     * @param {object} templateContext The template context.\n     * @returns {Promise<void>} A promise that resolves when the modal is set up.\n     */\n    setupContentModal = async(modalObject, templateContext) => {\n        const [loadingBody, textBody, textFooter] = await Promise.all([\n            Templates.render('tiny_aiplacement/loading', templateContext),\n            Templates.render('tiny_aiplacement/modalbodytext', templateContext),\n            Templates.render('tiny_aiplacement/modalfootertext', templateContext)\n        ]);\n\n        modalObject.setBody(loadingBody + textBody);\n        modalObject.setFooter(textFooter);\n        this.addContentEventListeners(modalObject);\n    };\n\n    /**\n     * Handle click events within the text modal.\n     *\n     * @param {Event} e - The click event object.\n     * @param {TextModal} modalObject - The image modal object.\n     * @param {HTMLElement} root - The root element of the modal.\n     */\n    handleContentModalClick = (e, modalObject, root) => {\n        const actions = {\n            generate: () => this.handleSubmit(root, e.target),\n            inserter: () => this.handleInsert(root, modalObject, e.target),\n            cancel: () => modalObject.destroy()\n        };\n\n        const actionKey = Object.keys(actions).find(key => e.target.closest(`[data-action=\"${key}\"]`));\n        if (actionKey) {\n            e.preventDefault();\n            actions[actionKey]();\n        }\n    };\n\n    /**\n     * Set up the prompt area in the modal, adding necessary event listeners.\n     *\n     * @param {HTMLElement} root - The root element of the modal.\n     */\n    setupPromptArea = (root) => {\n        const generateBtn = root.querySelector(this.SELECTORS.GENERATEBUTTON);\n        const promptArea = root.querySelector(this.SELECTORS.PROMPTAREA);\n\n        promptArea.addEventListener('input', () => {\n            generateBtn.disabled = promptArea.value.trim() === '';\n        });\n    };\n\n    /**\n     * Handle the submit action.\n     *\n     * @param {Object} root The root element of the modal.\n     * @param {Object} submitBtn The submit button element.\n     */\n    handleSubmit = async(root, submitBtn) => {\n        await this.displayLoading(root, submitBtn);\n\n        const requestArgs = this.getRequestArgs(root);\n        const request = {\n            methodname: 'aiplacement_tinymce_generate_text',\n            args: requestArgs\n        };\n\n        try {\n            this.responseObj = await Ajax.call([request])[0];\n            if (this.responseObj.error) {\n                this.handleGenerationError(root, submitBtn, this.responseObj.error);\n            } else {\n                await this.displayGeneratedText(root);\n                this.hideLoading(root, submitBtn);\n                window.console.log(this.responseObj);\n            }\n        } catch (error) {\n            this.handleGenerationError(root, submitBtn, '');\n        }\n    };\n\n    /**\n     * Handle the insert action.\n     *\n     * @param {Object} root The root element of the modal.\n     * @param {TextModal} modalObject - The image modal object.\n     * @param {HTMLElement} submitBtn - The submit button element.\n     */\n    handleInsert = async(root, modalObject, submitBtn) => {\n        await this.displayLoading(root, submitBtn);\n\n        // Update the generated response with the content from the form.\n        // In case the user has edited the response.\n        const generatedResponseDiv = root.querySelector(this.SELECTORS.GENERATEDRESPONSE);\n\n        // Wrap the edited sections in the response with tags.\n        // This is so we can differentiate between the edited sections and the generated content.\n        const wrappedEditedResponse = await TinyAiTextMarker.wrapEditedSections(\n            this.responseObj.generatedcontent,\n            generatedResponseDiv.value)\n        ;\n\n        // Replace double line breaks with <br> and with </p><p> for paragraphs.\n        this.responseObj.editedtext = this.replaceLineBreaks(wrappedEditedResponse);\n\n        // Generate the HTML for the response.\n        const formattedResponse = await Templates.render('tiny_aiplacement/textinsert', this.responseObj);\n\n        // Insert the response into the editor.\n        this.editor.insertContent(formattedResponse);\n        this.editor.execCommand('mceRepaint');\n        this.editor.windowManager.close();\n\n        // Close the modal and return to the editor.\n        modalObject.destroy();\n    };\n\n    /**\n     * Handle a generation error.\n     *\n     * @param {Object} root The root element of the modal.\n     * @param {Object} submitBtn The submit button element.\n     * @param {String} errorMessage The error message to display.\n     */\n    handleGenerationError = async(root, submitBtn, errorMessage = '') => {\n        const generatedResponseDiv = root.querySelector(this.SELECTORS.GENERATEDRESPONSE);\n        this.markError(generatedResponseDiv);\n        if (!errorMessage) {\n            // Get the default error message.\n            errorMessage = await getString('errorgentext', 'tiny_aiplacement');\n        }\n        generatedResponseDiv.value = errorMessage;\n        this.hideLoading(root, submitBtn);\n    };\n\n    /**\n     * Display the generated image in the modal.\n     *\n     * @param {HTMLElement} root - The root element of the modal.\n     */\n    displayGeneratedText = async(root) => {\n        const insertBtn = root.querySelector('[data-action=\"inserter\"]');\n        insertBtn.classList.remove('hidden');\n\n        // Add generated text to the modal.\n        const generatedResponseDiv = root.querySelector(this.SELECTORS.GENERATEDRESPONSE);\n        generatedResponseDiv.value = this.responseObj.generatedcontent;\n        generatedResponseDiv.disabled = false;\n        // Remove any error styling.\n        this.unMarkError(generatedResponseDiv);\n    };\n\n    /**\n     * Get the request args for the generated text.\n     *\n     * @param {Object} root The root element of the modal.\n     */\n    getRequestArgs = (root) => {\n        const contextId = getContextId(this.editor);\n        const promptText = root.querySelector(this.SELECTORS.PROMPTAREA).value;\n\n        return {\n            contextid: contextId,\n            prompttext: promptText\n        };\n    };\n\n    /**\n     * Replace double line breaks with <br> and with </p><p> for paragraphs.\n     * This is to handle the difference in response from the AI to what is expected by the editor.\n     *\n     * @param {String} text The text to replace.\n     * @returns {String}\n     */\n    replaceLineBreaks = (text) => {\n        // Replace double line breaks with </p><p> for paragraphs\n        const textWithParagraphs = text.replace(/\\n{2,}|\\r\\n/g, '<br/><br/>');\n\n        // Replace remaining single line breaks with <br> tags\n        const textWithBreaks = textWithParagraphs.replace(/\\n/g, '<br/>');\n\n        // Add opening and closing <p> tags to wrap the entire content\n        return `<p>${textWithBreaks}</p>`;\n    };\n\n    /**\n     * Mark the text as an error.\n     * @param {HTMLElement} element The root element of the modal.\n     */\n    markError = (element) => {\n        element.classList.add('alert-danger');\n    };\n\n    /**\n     * Unmark the text as an error.\n     * @param {HTMLElement} element The root element of the modal.\n     */\n    unMarkError = (element) => {\n        element.classList.remove('alert-danger');\n    };\n}\n"],"names":["GenerateText","GenerateBase","constructor","editor","async","modalObject","TextModal","create","modalConfig","getRoot","on","ModalEvents","hidden","destroy","templateContext","loadingBody","textBody","textFooter","Promise","all","Templates","render","setBody","setFooter","addContentEventListeners","e","root","actions","generate","this","handleSubmit","target","inserter","handleInsert","cancel","actionKey","Object","keys","find","key","closest","preventDefault","generateBtn","querySelector","SELECTORS","GENERATEBUTTON","promptArea","PROMPTAREA","addEventListener","disabled","value","trim","submitBtn","displayLoading","request","methodname","args","getRequestArgs","responseObj","Ajax","call","error","handleGenerationError","displayGeneratedText","hideLoading","window","console","log","generatedResponseDiv","GENERATEDRESPONSE","wrappedEditedResponse","TinyAiTextMarker","wrapEditedSections","generatedcontent","editedtext","replaceLineBreaks","formattedResponse","insertContent","execCommand","windowManager","close","errorMessage","_this","markError","classList","remove","unMarkError","contextid","prompttext","text","textWithBreaks","replace","element","add","id","type","TYPE","xlarge"],"mappings":"u6BAgCqBA,qBAAqBC,sBAkBtCC,YAAYC,wBACFA,oDAjBE,uCA+BCC,gBACHC,kBAAoBC,mBAAUC,OAAOP,aAAaQ,0BAChCH,YAAYI,WAE1BC,GAAGC,sBAAYC,QAAQ,KAC7BP,YAAYQ,aAGTR,yDAUSD,MAAMC,YAAaS,yBAC5BC,YAAaC,SAAUC,kBAAoBC,QAAQC,IAAI,CAC1DC,mBAAUC,OAAO,2BAA4BP,iBAC7CM,mBAAUC,OAAO,iCAAkCP,iBACnDM,mBAAUC,OAAO,mCAAoCP,mBAGzDT,YAAYiB,QAAQP,YAAcC,UAClCX,YAAYkB,UAAUN,iBACjBO,yBAAyBnB,gEAUR,CAACoB,EAAGpB,YAAaqB,cACjCC,QAAU,CACZC,SAAU,IAAMC,KAAKC,aAAaJ,KAAMD,EAAEM,QAC1CC,SAAU,IAAMH,KAAKI,aAAaP,KAAMrB,YAAaoB,EAAEM,QACvDG,OAAQ,IAAM7B,YAAYQ,WAGxBsB,UAAYC,OAAOC,KAAKV,SAASW,MAAKC,KAAOd,EAAEM,OAAOS,gCAAyBD,aACjFJ,YACAV,EAAEgB,iBACFd,QAAQQ,yDASGT,aACTgB,YAAchB,KAAKiB,cAAcd,KAAKe,UAAUC,gBAChDC,WAAapB,KAAKiB,cAAcd,KAAKe,UAAUG,YAErDD,WAAWE,iBAAiB,SAAS,KACjCN,YAAYO,SAAuC,KAA5BH,WAAWI,MAAMC,kDAUjC/C,MAAMsB,KAAM0B,mBACjBvB,KAAKwB,eAAe3B,KAAM0B,iBAG1BE,QAAU,CACZC,WAAY,oCACZC,KAHgB3B,KAAK4B,eAAe/B,gBAO/BgC,kBAAoBC,cAAKC,KAAK,CAACN,UAAU,GAC1CzB,KAAK6B,YAAYG,WACZC,sBAAsBpC,KAAM0B,UAAWvB,KAAK6B,YAAYG,cAEvDhC,KAAKkC,qBAAqBrC,WAC3BsC,YAAYtC,KAAM0B,WACvBa,OAAOC,QAAQC,IAAItC,KAAK6B,cAE9B,MAAOG,YACAC,sBAAsBpC,KAAM0B,UAAW,6CAWrChD,MAAMsB,KAAMrB,YAAa+C,mBAC9BvB,KAAKwB,eAAe3B,KAAM0B,iBAI1BgB,qBAAuB1C,KAAKiB,cAAcd,KAAKe,UAAUyB,mBAIzDC,4BAA8BC,kBAAiBC,mBACjD3C,KAAK6B,YAAYe,iBACjBL,qBAAqBlB,YAIpBQ,YAAYgB,WAAa7C,KAAK8C,kBAAkBL,6BAG/CM,wBAA0BxD,mBAAUC,OAAO,8BAA+BQ,KAAK6B,kBAGhFvD,OAAO0E,cAAcD,wBACrBzE,OAAO2E,YAAY,mBACnB3E,OAAO4E,cAAcC,QAG1B3E,YAAYQ,2DAUQT,eAAMsB,KAAM0B,eAAW6B,oEAAe,SACpDb,qBAAuB1C,KAAKiB,cAAcuC,MAAKtC,UAAUyB,mBAC/Da,MAAKC,UAAUf,sBACVa,eAEDA,mBAAqB,kBAAU,eAAgB,qBAEnDb,qBAAqBlB,MAAQ+B,aAC7BC,MAAKlB,YAAYtC,KAAM0B,2DAQJhD,MAAAA,OACDsB,KAAKiB,cAAc,4BAC3ByC,UAAUC,OAAO,gBAGrBjB,qBAAuB1C,KAAKiB,cAAcd,KAAKe,UAAUyB,mBAC/DD,qBAAqBlB,MAAQrB,KAAK6B,YAAYe,iBAC9CL,qBAAqBnB,UAAW,OAE3BqC,YAAYlB,gEAQH1C,OAIP,CACH6D,WAJc,yBAAa1D,KAAK1B,QAKhCqF,WAJe9D,KAAKiB,cAAcd,KAAKe,UAAUG,YAAYG,oDAehDuC,aAKXC,eAHqBD,KAAKE,QAAQ,eAAgB,cAGdA,QAAQ,MAAO,4BAG5CD,4DAOJE,UACTA,QAAQR,UAAUS,IAAI,uDAOXD,UACXA,QAAQR,UAAUC,OAAO,wBAhOpBzC,UAAY,CACbC,0BAAoBhB,KAAK1B,OAAO2F,uCAChC/C,sBAAgBlB,KAAK1B,OAAO2F,mCAC5BzB,kBAAmB,IAAMxC,KAAK1B,OAAO2F,GAAK,wFAvBjC9F,2BAQI,CACjB+F,KAAMzF,mBAAU0F,KAChBC,QAAQ"}