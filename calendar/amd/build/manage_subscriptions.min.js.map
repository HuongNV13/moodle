{"version":3,"sources":["../src/manage_subscriptions.js"],"names":["getSubscriptionId","element","parseInt","closest","dataset","subid","getSubscriptionName","subname","getSubscriptionInterval","subscriptionId","document","getElementById","value","getSubscriptionRow","querySelector","createModal","messageCode","subscriptionName","modalPromise","Modal","create","type","types","SAVE_CANCEL","title","body","then","modal","setSaveButtonText","getRoot","on","ModalEvents","hidden","focus","show","catch","Notification","exception","responseHandlerForUpdate","data","message","status","context","subscriptionname","eventsimported","results","eventsskipped","eventsupdated","eventsdeleted","haserror","eventserror","errors","Templates","render","warnings","addNotification","responseHandlerForDelete","registerEventListeners","addEventListener","e","updateAction","target","CalendarSelectors","actions","updateSubscription","preventDefault","save","pollInterval","CalendarRepository","deleteAction","deleteSubscription","response","subscriptionRow","remove","init","Prefetch","prefetchStrings"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A module to handle Delete/Update operations of the manage subscription page.\n *\n * @module core_calendar/manage_subscriptions\n * @copyright 2021 Huong Nguyen <huongnv13@gmail.com>\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since 4.0\n */\n\nimport * as CalendarSelectors from 'core_calendar/selectors';\nimport * as CalendarRepository from 'core_calendar/repository';\nimport * as Modal from 'core/modal_factory';\nimport * as ModalEvents from 'core/modal_events';\nimport * as Notification from 'core/notification';\nimport Prefetch from 'core/prefetch';\nimport Templates from 'core/templates';\nimport {get_string as getString} from 'core/str';\n\n/**\n * Get subscription id for given element.\n *\n * @param {HTMLElement} element update/delete link\n * @return {Number}\n */\nconst getSubscriptionId = element => {\n    return parseInt(element.closest('tr').dataset.subid);\n};\n\n/**\n * Get subscription name for given element.\n *\n * @param {HTMLElement} element update/delete link\n * @return {String}\n */\nconst getSubscriptionName = element => {\n    return element.closest('tr').dataset.subname;\n};\n\n/**\n * Get subscription interval for given subscription id.\n *\n * @param {string} subscriptionId Subscription id\n * @return {Element}\n */\nconst getSubscriptionInterval = subscriptionId => {\n    return document.getElementById('sub-interval-for-' + subscriptionId).value;\n};\n\n/**\n * Get subscription table row for subscription id.\n *\n * @param {string} subscriptionId Subscription id\n * @return {Element}\n */\nconst getSubscriptionRow = subscriptionId => {\n    return document.querySelector('tr[data-subid=\"' + subscriptionId + '\"]');\n};\n\n/**\n * Create modal.\n *\n * @param {HTMLElement} element\n * @param {string} messageCode Message code.\n * @return {promise} Promise for modal\n */\nconst createModal = (element, messageCode) => {\n    const subscriptionName = getSubscriptionName(element);\n    const modalPromise = Modal.create({\n        type: Modal.types.SAVE_CANCEL,\n        title: getString('confirmation', 'admin'),\n        body: getString(messageCode, 'calendar', subscriptionName)\n    });\n\n    modalPromise.then(function(modal) {\n        modal.setSaveButtonText(getString('yes'));\n        modal.getRoot().on(ModalEvents.hidden, () => {\n            element.focus();\n        });\n        modal.show();\n        return modal;\n    }).catch(Notification.exception);\n\n    return modalPromise;\n};\n\n/**\n * Response handler for update action.\n *\n * @param {HTMLElement} element\n * @param {Object} data\n * @return {Promise}\n */\nconst responseHandlerForUpdate = async(element, data) => {\n    const subscriptionName = getSubscriptionName(element);\n    let message = '';\n    if (data.status) {\n        const context = {\n            subscriptionname: subscriptionName,\n            eventsimported: data.results.eventsimported,\n            eventsskipped: data.results.eventsskipped,\n            eventsupdated: data.results.eventsupdated,\n            eventsdeleted: data.results.eventsdeleted,\n            haserror: data.results.haserror,\n            eventserror: data.results.errors\n        };\n        message = await Templates.render('core_calendar/subscription_update_result', context);\n    } else {\n        message = data.warnings[0].message;\n    }\n    const type = data.status ? 'info' : 'error';\n    return addNotification(message, type);\n};\n\n/**\n * Response handler for delete action.\n *\n * @param {HTMLElement} element\n * @param {Object} data\n * @return {Promise}\n */\nconst responseHandlerForDelete = async(element, data) => {\n    const subscriptionName = getSubscriptionName(element);\n    const message = data.status ? await getString('subscriptionremoved', 'calendar', subscriptionName) : data.warnings[0].message;\n    const type = data.status ? 'info' : 'error';\n    return addNotification(message, type);\n};\n\n/**\n * Add notification.\n *\n * @param {string} message Notification message\n * @param {string} type Notification type\n * @return {Promise}\n */\nconst addNotification = (message, type) => {\n    return Notification.addNotification({\n        message: message,\n        type: type\n    });\n};\n\n/**\n * Register events for update/delete links.\n */\nconst registerEventListeners = () => {\n    document.addEventListener('click', e => {\n        const updateAction = e.target.closest(CalendarSelectors.actions.updateSubscription);\n        if (updateAction) {\n            e.preventDefault();\n            const modalPromise = createModal(updateAction, 'confirmsubscriptionupdate');\n            modalPromise.then(modal => {\n                modal.getRoot().on(ModalEvents.save, () => {\n                    const subscriptionId = getSubscriptionId(updateAction);\n                    const pollInterval = getSubscriptionInterval(subscriptionId);\n                    CalendarRepository.updateSubscription(subscriptionId, pollInterval).then(data => {\n                        return responseHandlerForUpdate(updateAction, data);\n                    }).catch(Notification.exception);\n                });\n\n                return modal;\n            }).catch(Notification.exception);\n        }\n\n        const deleteAction = e.target.closest(CalendarSelectors.actions.deleteSubscription);\n        if (deleteAction) {\n            e.preventDefault();\n            const modalPromise = createModal(deleteAction, 'confirmsubscriptiondelete');\n            modalPromise.then(modal => {\n                modal.getRoot().on(ModalEvents.save, () => {\n                    const subscriptionId = getSubscriptionId(deleteAction);\n                    CalendarRepository.deleteSubscription(subscriptionId).then(data => {\n                        const response = responseHandlerForDelete(deleteAction, data);\n                        return response.then(() => {\n                            const subscriptionRow = getSubscriptionRow(subscriptionId);\n                            return subscriptionRow.remove();\n                        });\n                    }).catch(Notification.exception);\n                });\n\n                return modal;\n            }).catch(Notification.exception);\n        }\n    });\n};\n\n/**\n * Initialises.\n */\nexport const init = () => {\n    Prefetch.prefetchStrings('moodle', ['yes']);\n    Prefetch.prefetchStrings('core_admin', ['confirmation']);\n    Prefetch.prefetchStrings('core_calendar', ['confirmsubscriptionupdate', 'confirmsubscriptiondelete', 'subscriptionremoved']);\n    registerEventListeners();\n};\n"],"file":"manage_subscriptions.min.js"}