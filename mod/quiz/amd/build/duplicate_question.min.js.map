{"version":3,"file":"duplicate_question.min.js","sources":["../src/duplicate_question.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A javascript module to handle question duplicating for quiz.\n *\n * @module mod_quiz/duplicate\n * @copyright 2022 Huong Nguyen <huongnv13@gmail.com>\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since 4.1\n */\n\nimport Notification from 'core/notification';\nimport Prefetch from 'core/prefetch';\nimport {get_string as getString} from 'core/str';\nimport * as Modal from 'core/modal_factory';\nimport * as ModalEvents from 'core/modal_events';\nimport * as QuizRepository from 'mod_quiz/repository';\nimport * as DuplicateQuestionRepository from 'qbank_duplicatequestion/repository';\n\nconst SELECTOR = {\n    duplicateQuestion: '.path-mod-quiz [data-action=\"duplicatequestion\"]'\n};\n\n/**\n * Register events for duplicate links.\n *\n * @param {int} contextId Context id\n * @param {string} returnUrl Return url\n * @param {int} quizId Quiz id\n */\nconst registerEventListeners = (contextId, returnUrl, quizId) => {\n    document.addEventListener('click', e => {\n        const duplicateAction = e.target.closest(SELECTOR.duplicateQuestion);\n        if (duplicateAction) {\n            e.preventDefault();\n            const questionId = duplicateAction.dataset.questionid;\n            const questionName = duplicateAction.dataset.questionname;\n            const questionType = duplicateAction.dataset.questiontype;\n            const pageNumber = duplicateAction.dataset.page;\n            const modalPromise = Modal.create({\n                type: Modal.types.SAVE_CANCEL,\n                title: getString('confirmation', 'admin'),\n                body: getString('duplicatequestioncheck', 'qbank_duplicatequestion', questionName),\n                buttons: {\n                    save: getString('yes')\n                },\n            }).then(modal => {\n                modal.show();\n                return modal;\n            });\n            modalPromise.then(modal => {\n                modal.getRoot().on(ModalEvents.save, () => {\n                    if (questionType == 'random') {\n                        // Random question type. No need to duplicate the question in the question bank.\n                        QuizRepository.addQuestionToQuiz(questionId, true, quizId, pageNumber).then(data => {\n                            if (data.status) {\n                                return window.location.assign(returnUrl);\n                            } else {\n                                return Notification.alert(getString('error'), data.warnings[0].message);\n                            }\n                        }).catch(Notification.exception);\n                    } else {\n                        // Normal question type.\n                        // First, we need to duplicate the question in the question bank.\n                        DuplicateQuestionRepository.duplicateQuestion(questionId, contextId, returnUrl).then(data => {\n                            if (data.status) {\n                                // After we duplicate the question in the question bank.\n                                // Get the created question id and add it to the Quiz.\n                                const createdQuestionId = data.createdquestionid;\n                                QuizRepository.addQuestionToQuiz(createdQuestionId, false, quizId, pageNumber).then(data => {\n                                    if (data.status) {\n                                        window.location.assign(returnUrl);\n                                    } else {\n                                        Notification.alert(getString('error'), data.warnings[0].message);\n                                    }\n                                    return;\n                                }).catch(Notification.exception);\n                                return;\n                            } else {\n                                Notification.alert(getString('error'), data.warnings[0].message);\n                                return;\n                            }\n                        }).catch(Notification.exception);\n                    }\n                });\n                return modal;\n            }).catch(Notification.exception);\n        }\n    });\n};\n\n/**\n * Initialises.\n *\n * @param {int} contextId Context id\n * @param {string} returnUrl Return url\n * @param {int} quizId Quiz id\n */\nexport const init = (contextId, returnUrl, quizId) => {\n    Prefetch.prefetchStrings('moodle', ['yes', 'error']);\n    Prefetch.prefetchStrings('core_admin', ['confirmation']);\n    Prefetch.prefetchStrings('qbank_duplicatequestion', ['duplicatequestioncheck']);\n    registerEventListeners(contextId, returnUrl, quizId);\n};\n"],"names":["SELECTOR","contextId","returnUrl","quizId","prefetchStrings","document","addEventListener","e","duplicateAction","target","closest","preventDefault","questionId","dataset","questionid","questionName","questionname","questionType","questiontype","pageNumber","page","Modal","create","type","types","SAVE_CANCEL","title","body","buttons","save","then","modal","show","getRoot","on","ModalEvents","QuizRepository","addQuestionToQuiz","data","status","window","location","assign","Notification","alert","warnings","message","catch","exception","DuplicateQuestionRepository","duplicateQuestion","createdQuestionId","createdquestionid","registerEventListeners"],"mappings":";;;;;;;;sZAgCMA,2BACiB,iEA8EH,CAACC,UAAWC,UAAWC,4BAC9BC,gBAAgB,SAAU,CAAC,MAAO,4BAClCA,gBAAgB,aAAc,CAAC,mCAC/BA,gBAAgB,0BAA2B,CAAC,2BAvE1B,EAACH,UAAWC,UAAWC,UAClDE,SAASC,iBAAiB,SAASC,UACzBC,gBAAkBD,EAAEE,OAAOC,QAAQV,+BACrCQ,gBAAiB,CACjBD,EAAEI,uBACIC,WAAaJ,gBAAgBK,QAAQC,WACrCC,aAAeP,gBAAgBK,QAAQG,aACvCC,aAAeT,gBAAgBK,QAAQK,aACvCC,WAAaX,gBAAgBK,QAAQO,KACtBC,MAAMC,OAAO,CAC9BC,KAAMF,MAAMG,MAAMC,YAClBC,OAAO,mBAAU,eAAgB,SACjCC,MAAM,mBAAU,yBAA0B,0BAA2BZ,cACrEa,QAAS,CACLC,MAAM,mBAAU,UAErBC,MAAKC,QACJA,MAAMC,OACCD,SAEED,MAAKC,QACdA,MAAME,UAAUC,GAAGC,YAAYN,MAAM,KACb,UAAhBZ,aAEAmB,eAAeC,kBAAkBzB,YAAY,EAAMT,OAAQgB,YAAYW,MAAKQ,MACpEA,KAAKC,OACEC,OAAOC,SAASC,OAAOxC,WAEvByC,sBAAaC,OAAM,mBAAU,SAAUN,KAAKO,SAAS,GAAGC,WAEpEC,MAAMJ,sBAAaK,WAItBC,4BAA4BC,kBAAkBtC,WAAYX,UAAWC,WAAW4B,MAAKQ,UAC7EA,KAAKC,cAGCY,kBAAoBb,KAAKc,kBAC/BhB,eAAeC,kBAAkBc,mBAAmB,EAAOhD,OAAQgB,YAAYW,MAAKQ,OAC5EA,KAAKC,OACLC,OAAOC,SAASC,OAAOxC,iCAEV0C,OAAM,mBAAU,SAAUN,KAAKO,SAAS,GAAGC,YAG7DC,MAAMJ,sBAAaK,sCAGTJ,OAAM,mBAAU,SAAUN,KAAKO,SAAS,GAAGC,YAG7DC,MAAMJ,sBAAaK,cAGvBjB,SACRgB,MAAMJ,sBAAaK,gBAgB9BK,CAAuBpD,UAAWC,UAAWC"}