{"version":3,"sources":["../src/event_list.js"],"names":["define","$","Notification","Templates","PagedContentFactory","Str","UserDate","CalendarEventsRepository","SELECTORS","EMPTY_MESSAGE","ROOT","EVENT_LIST_CONTENT","EVENT_LIST_LOADING_PLACEHOLDER","MORE_EVENTS_BUTTON","TEMPLATES","DEFAULT_PAGED_CONTENT_CONFIG","ignoreControlWhileLoading","controlPlacementBottom","ariaLabels","itemsperpagecomponents","rootElement","showContent","root","find","removeClass","addClass","emptyContent","empty","buildTemplateContext","calendarEvents","midnight","eventsByDay","templateContext","eventsbyday","forEach","calendarEvent","dayTimestamp","timeusermidnight","push","Object","keys","events","past","render","templateName","load","limit","daysOffset","daysLimit","lastId","courseId","endTime","args","starttime","aftereventid","endtime","courseid","queryByCourse","queryByTime","loadEventsForLazy","lastIds","loadMoreBtn","eventsPromise","then","result","length","filter","event","eventtype","getUserMidnightForTimestamp","timesort","lastEventId","at","id","setOffset","hide","createPagedContent","pageLimit","preloadedPages","firstLoad","paginationAriaLabel","additionalConfig","config","extend","get_string","isArray","value","string","itemsperpage","paginationnav","testPromise","catch","exception","getOffset","loadMoreButton","parseInt","attr","offset","initEventListener","parent","on","loadMoreEventForCourse","rootEle","eventListContent","first","renderPromise","html","js","content","appendNodeContents","init","Deferred","loadingPlaceholder","replaceNodeContents","rootSelector"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript to load and render the list of calendar events for a\n * given day range.\n *\n * @module     block_timeline/event_list\n * @copyright  2016 Ryan Wyllie <ryan@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(\n[\n    'jquery',\n    'core/notification',\n    'core/templates',\n    'core/paged_content_factory',\n    'core/str',\n    'core/user_date',\n    'block_timeline/calendar_events_repository'\n],\nfunction(\n    $,\n    Notification,\n    Templates,\n    PagedContentFactory,\n    Str,\n    UserDate,\n    CalendarEventsRepository\n) {\n\n    var SECONDS_IN_DAY = 60 * 60 * 24;\n\n    var SELECTORS = {\n        EMPTY_MESSAGE: '[data-region=\"empty-message\"]',\n        ROOT: '[data-region=\"event-list-container\"]',\n        EVENT_LIST_CONTENT: '[data-region=\"event-list-content\"]',\n        EVENT_LIST_LOADING_PLACEHOLDER: '[data-region=\"event-list-loading-placeholder\"]',\n        MORE_EVENTS_BUTTON: '[data-action=\"more-events\"]',\n    };\n\n    var TEMPLATES = {\n        EVENT_LIST_CONTENT: 'block_timeline/event-list-content'\n    };\n\n    // We want the paged content controls below the paged content area\n    // and the controls should be ignored while data is loading.\n    var DEFAULT_PAGED_CONTENT_CONFIG = {\n        ignoreControlWhileLoading: true,\n        controlPlacementBottom: true,\n        ariaLabels: {\n            itemsperpagecomponents: 'ariaeventlistpagelimit, block_timeline',\n        }\n    };\n\n    let rootElement;\n\n    /**\n     * Hide the content area and display the empty content message.\n     *\n     * @param {object} root The container element\n     */\n        // eslint-disable-next-line no-unused-vars\n    var hideContent = function(root) {\n        root.find(SELECTORS.EVENT_LIST_CONTENT).addClass('hidden');\n        root.find(SELECTORS.EMPTY_MESSAGE).removeClass('hidden');\n    };\n\n    /**\n     * Show the content area and hide the empty content message.\n     *\n     * @param {object} root The container element\n     */\n    var showContent = function(root) {\n        root.find(SELECTORS.EVENT_LIST_CONTENT).removeClass('hidden');\n        root.find(SELECTORS.EMPTY_MESSAGE).addClass('hidden');\n    };\n\n    /**\n     * Empty the content area.\n     *\n     * @param {object} root The container element\n     */\n    var emptyContent = function(root) {\n        root.find(SELECTORS.EVENT_LIST_CONTENT).empty();\n    };\n\n    /**\n     * Construct the template context from a list of calendar events. The events\n     * are grouped by which day they are on. The day is calculated from the user's\n     * midnight timestamp to ensure that the calculation is timezone agnostic.\n     *\n     * The return data structure will look like:\n     * {\n     *      eventsbyday: [\n     *          {\n     *              dayTimestamp: 1533744000,\n     *              events: [\n     *                  { ...event 1 data... },\n     *                  { ...event 2 data... }\n     *              ]\n     *          },\n     *          {\n     *              dayTimestamp: 1533830400,\n     *              events: [\n     *                  { ...event 3 data... },\n     *                  { ...event 4 data... }\n     *              ]\n     *          }\n     *      ]\n     * }\n     *\n     * Each day timestamp is the day's midnight in the user's timezone.\n     *\n     * @param {array} calendarEvents List of calendar events\n     * @param {Number} midnight A timestamp representing midnight in the user's timezone\n     * @return {object}\n     */\n    var buildTemplateContext = function(calendarEvents, midnight) {\n        var eventsByDay = {};\n        var templateContext = {\n            eventsbyday: []\n        };\n\n        calendarEvents.forEach(function(calendarEvent) {\n            var dayTimestamp = calendarEvent.timeusermidnight;\n            if (eventsByDay[dayTimestamp]) {\n                eventsByDay[dayTimestamp].push(calendarEvent);\n            } else {\n                eventsByDay[dayTimestamp] = [calendarEvent];\n            }\n        });\n\n        Object.keys(eventsByDay).forEach(function(dayTimestamp) {\n            var events = eventsByDay[dayTimestamp];\n            templateContext.eventsbyday.push({\n                past: dayTimestamp < midnight,\n                dayTimestamp: dayTimestamp,\n                events: events\n            });\n        });\n\n        return templateContext;\n    };\n\n    /**\n     * Render the HTML for the given calendar events.\n     *\n     * @param {array} calendarEvents  A list of calendar events\n     * @param {Number} midnight A timestamp representing midnight for the user\n     * @return {promise} Resolved with HTML and JS strings.\n     */\n        // eslint-disable-next-line no-unused-vars\n    var render = function(calendarEvents, midnight) {\n        var templateContext = buildTemplateContext(calendarEvents, midnight);\n        var templateName = TEMPLATES.EVENT_LIST_CONTENT;\n\n        return Templates.render(templateName, templateContext);\n    };\n\n    /**\n     * Retrieve a list of calendar events from the server for the given\n     * constraints.\n     *\n     * @param {Number} midnight The user's midnight time in unix timestamp.\n     * @param {Number} limit Limit the result set to this number of items\n     * @param {Number} daysOffset How many days (from midnight) to offset the results from\n     * @param {int|undefined} daysLimit How many dates (from midnight) to limit the result to\n     * @param {int|false} lastId The ID of the last seen event (if any)\n     * @param {int|undefined} courseId Course ID to restrict events to\n     * @return {Promise} A jquery promise\n     */\n    var load = function(midnight, limit, daysOffset, daysLimit, lastId, courseId) {\n        var startTime = midnight + (daysOffset * SECONDS_IN_DAY);\n        var endTime = daysLimit != undefined ? midnight + (daysLimit * SECONDS_IN_DAY) : false;\n\n        var args = {\n            starttime: startTime,\n            limit: limit,\n        };\n\n        if (lastId) {\n            args.aftereventid = lastId;\n        }\n\n        if (endTime) {\n            args.endtime = endTime;\n        }\n\n        if (courseId) {\n            // If we have a course id then we only want events from that course.\n            args.courseid = courseId;\n            return CalendarEventsRepository.queryByCourse(args);\n        } else {\n            // Otherwise we want events from any course.\n            return CalendarEventsRepository.queryByTime(args);\n        }\n    };\n\n    /**\n     * Handle a single page request from the paged content. Uses the given page data to request\n     * the events from the server.\n     *\n     * Checks the given preloadedPages before sending a request to the server to make sure we\n     * don't load data unnecessarily.\n     *\n     * @param {object} pageData A single page data (see core/paged_content_pages for more info).\n     * @param {object} actions Paged content actions (see core/paged_content_pages for more info).\n     * @param {Number} midnight The user's midnight time in unix timestamp.\n     * @param {object} lastIds The last event ID for each loaded page. Page number is key, id is value.\n     * @param {object} preloadedPages An object of preloaded page data. Page number as key, data promise as value.\n     * @param {int|undefined} courseId Course ID to restrict events to\n     * @param {Number} daysOffset How many days (from midnight) to offset the results from\n     * @param {int|undefined} daysLimit How many dates (from midnight) to limit the result to\n     * @return {object} jQuery promise resolved with calendar events.\n     */\n        // eslint-disable-next-line no-unused-vars\n    var loadEventsFromPageData = function(\n        pageData,\n        actions,\n        midnight,\n        lastIds,\n        preloadedPages,\n        courseId,\n        daysOffset,\n        daysLimit\n    ) {\n        var pageNumber = pageData.pageNumber;\n        var limit = pageData.limit;\n        var lastPageNumber = pageNumber;\n\n        // This is here to protect us if, for some reason, the pages\n        // are loaded out of order somehow and we don't have a reference\n        // to the previous page. In that case, scan back to find the most\n        // recent page we've seen.\n        while (!lastIds.hasOwnProperty(lastPageNumber)) {\n            lastPageNumber--;\n        }\n        // Use the last id of the most recent page.\n        var lastId = lastIds[lastPageNumber];\n        var eventsPromise = null;\n\n        if (preloadedPages && preloadedPages.hasOwnProperty(pageNumber)) {\n            // This page has been preloaded so use that rather than load the values\n            // again.\n            eventsPromise = preloadedPages[pageNumber];\n        } else {\n            // Load one more than the given limit so that we can tell if there\n            // is more content to load after this.\n            eventsPromise = load(midnight, limit + 1, daysOffset, daysLimit, lastId, courseId);\n        }\n\n        return eventsPromise.then(function(result) {\n            if (!result.events.length) {\n                // If we didn't get any events back then tell the paged content\n                // that we're done loading.\n                actions.allItemsLoaded(pageNumber);\n                return [];\n            }\n\n            var calendarEvents = result.events.filter(function(event) {\n                if (event.eventtype == \"open\" || event.eventtype == \"opensubmission\") {\n                    var dayTimestamp = UserDate.getUserMidnightForTimestamp(event.timesort, midnight);\n                    return dayTimestamp > midnight;\n                }\n                return true;\n            });\n            // We expect to receive limit + 1 events back from the server.\n            // Any less means there are no more events to load.\n            var loadedAll = calendarEvents.length <= limit;\n\n            if (loadedAll) {\n                // Tell the pagination that everything is loaded.\n                actions.allItemsLoaded(pageNumber);\n            } else {\n                // Remove the last element from the array because it isn't\n                // needed in this result set.\n                calendarEvents.pop();\n            }\n\n            return calendarEvents;\n        });\n    };\n\n    const loadEventsForLazy = function(midnight, lastIds, courseId, daysOffset, daysLimit, loadMoreBtn) {\n        const limit = 5;\n        const eventsPromise = load(midnight, limit, daysOffset, daysLimit, lastIds, courseId);\n        return eventsPromise.then(function(result) {\n            if (!result.events.length) {\n                return [];\n            }\n            const calendarEvents = result.events.filter(function(event) {\n                if (event.eventtype == \"open\" || event.eventtype == \"opensubmission\") {\n                    const dayTimestamp = UserDate.getUserMidnightForTimestamp(event.timesort, midnight);\n                    return dayTimestamp > midnight;\n                }\n                return true;\n            });\n\n            const lastEventId = calendarEvents.at(-1).id;\n            setOffset(loadMoreBtn, lastEventId);\n\n            if (calendarEvents.length < limit) {\n                loadMoreBtn.hide();\n            }\n\n            return calendarEvents;\n        });\n    };\n\n    /**\n     * Use the paged content factory to create a paged content element for showing\n     * the event list. We only provide a page limit to the factory because we don't\n     * know exactly how many pages we'll need. This creates a paging bar with just\n     * next/previous buttons.\n     *\n     * This function specifies the callback for loading the event data that the user\n     * is requesting.\n     *\n     * @param {int|array} pageLimit A single limit or list of limits as options for the paged content\n     * @param {object} preloadedPages An object of preloaded page data. Page number as key, data promise as value.\n     * @param {Number} midnight The user's midnight time in unix timestamp.\n     * @param {object} firstLoad A jQuery promise to be resolved after the first set of data is loaded.\n     * @param {int|undefined} courseId Course ID to restrict events to\n     * @param {Number} daysOffset How many days (from midnight) to offset the results from\n     * @param {int|undefined} daysLimit How many dates (from midnight) to limit the result to\n     * @param {string} paginationAriaLabel String to set as the aria label for the pagination bar.\n     * @param {object} additionalConfig Additional config options to pass to pagedContentFactory\n     * @return {object} jQuery promise.\n     */\n    var createPagedContent = function(\n        pageLimit,\n        preloadedPages,\n        midnight,\n        firstLoad,\n        courseId,\n        daysOffset,\n        daysLimit,\n        paginationAriaLabel,\n        additionalConfig,\n        loadMoreBtn\n    ) {\n        // Remember the last event id we loaded on each page because we can't\n        // use the offset value since the backend can skip events if the user doesn't\n        // have the capability to see them. Instead we load the next page of events\n        // based on the last seen event id.\n        var config = $.extend({}, DEFAULT_PAGED_CONTENT_CONFIG, additionalConfig);\n\n        return Str.get_string(\n                'ariaeventlistpagelimit',\n                'block_timeline',\n                $.isArray(pageLimit) ? pageLimit[0].value : pageLimit\n            )\n            .then(function(string) {\n                config.ariaLabels.itemsperpage = string;\n                config.ariaLabels.paginationnav = paginationAriaLabel;\n                return string;\n            })\n            .then(function() {\n                var testPromise = loadEventsForLazy(\n                    midnight,\n                    0,\n                    courseId,\n                    daysOffset,\n                    daysLimit,\n                    loadMoreBtn\n                ).then(calendarEvents => {\n                    if (calendarEvents.length) {\n                        return render(calendarEvents, midnight);\n                    } else {\n                        return calendarEvents;\n                    }\n                }).catch(Notification.exception);\n\n                return testPromise;\n            });\n    };\n\n    /**\n     * Create a paged content region for the calendar events in the given root element.\n     * The content of the root element are replaced with a new paged content section\n     * each time this function is called.\n     *\n     * This function will be called each time the offset or limit values are changed to\n     * reload the event list region.\n     *\n     * @param {object} root The event list container element\n     * @param {int|array} pageLimit A single limit or list of limits as options for the paged content\n     * @param {object} preloadedPages An object of preloaded page data. Page number as key, data promise as value.\n     * @param {string} paginationAriaLabel String to set as the aria label for the pagination bar.\n     * @param {object} additionalConfig Additional config options to pass to pagedContentFactory\n     */\n    var init = function(root, pageLimit, preloadedPages, paginationAriaLabel, additionalConfig) {\n        root = $(root);\n        rootElement = root;\n        initEventListener();\n\n        // Create a promise that will be resolved once the first set of page\n        // data has been loaded. This ensures that the loading placeholder isn't\n        // hidden until we have all of the data back to prevent the page elements\n        // jumping around.\n        var firstLoad = $.Deferred();\n        var eventListContent = root.find(SELECTORS.EVENT_LIST_CONTENT);\n        var loadingPlaceholder = root.find(SELECTORS.EVENT_LIST_LOADING_PLACEHOLDER);\n        var courseId = root.attr('data-course-id');\n        var daysOffset = parseInt(root.attr('data-days-offset'), 10);\n        var daysLimit = root.attr('data-days-limit');\n        var midnight = parseInt(root.attr('data-midnight'), 10);\n        var loadMoreBtn = root.parent().find(SELECTORS.MORE_EVENTS_BUTTON);\n\n        // Make sure the content area and loading placeholder is visible.\n        // This is because the init function can be called to re-initialise\n        // an existing event list area.\n        emptyContent(root);\n        showContent(root);\n        loadingPlaceholder.removeClass('hidden');\n\n        // Days limit isn't mandatory.\n        if (daysLimit != undefined) {\n            daysLimit = parseInt(daysLimit, 10);\n        }\n\n        // Created the paged content element.\n        return createPagedContent(pageLimit, preloadedPages, midnight, firstLoad, courseId, daysOffset, daysLimit,\n                paginationAriaLabel, additionalConfig, loadMoreBtn)\n            .then(function(html, js) {\n                html = $(html);\n                // // Hide the content for now.\n                html.addClass('hidden');\n                // Replace existing elements with the newly created paged content.\n                // If we're reinitialising an existing event list this will replace\n                // the old event list (including removing any event handlers).\n                Templates.replaceNodeContents(eventListContent, html, js);\n                html.removeClass('hidden');\n                loadingPlaceholder.addClass('hidden');\n                return html;\n            })\n            .catch(Notification.exception);\n    };\n\n    const getOffset = function(loadMoreButton) {\n        return parseInt(loadMoreButton.attr('data-offset'), 10);\n    };\n\n    const setOffset = function(loadMoreButton, offset) {\n        loadMoreButton.attr('data-offset', offset);\n    };\n\n    const initEventListener = function() {\n        const loadMoreButton = rootElement.parent().find(SELECTORS.MORE_EVENTS_BUTTON);\n        loadMoreButton.on('click', loadMoreEventForCourse);\n    };\n\n    const loadMoreEventForCourse = function() {\n        const loadMoreBtn = $(this);\n        const rootEle = loadMoreBtn.parent().find(SELECTORS.ROOT);\n        const midnight = parseInt(rootEle.attr('data-midnight'), 10);\n        const courseId = rootEle.attr('data-course-id');\n        const daysOffset = parseInt(rootEle.attr('data-days-offset'), 10);\n        const daysLimit = rootEle.attr('data-days-limit');\n        const lastIds = getOffset(loadMoreBtn);\n        const eventListContent = rootEle.find(SELECTORS.EVENT_LIST_CONTENT).find('div').first();\n        const testPromise = loadEventsForLazy(\n            midnight,\n            lastIds,\n            courseId,\n            daysOffset,\n            daysLimit,\n            loadMoreBtn\n        );\n        testPromise.then(calendarEvents => {\n            if (calendarEvents.length) {\n                const renderPromise = render(calendarEvents, midnight);\n                renderPromise.then((html, js) => {\n                    html = $(html);\n                    const content = html.find('div').first();\n                    Templates.appendNodeContents(eventListContent, content, js);\n                });\n            }\n        }).catch(Notification.exception);\n    };\n\n    return {\n        init: init,\n        rootSelector: SELECTORS.ROOT,\n    };\n});\n"],"file":"event_list.min.js"}