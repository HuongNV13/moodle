{"version":3,"file":"share.min.js","sources":["../src/share.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A module to handle Share operations of the MoodleNet.\n *\n * @module     tool_moodlenet/share\n * @copyright  2022 Huong Nguyen <huongnv13@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since      4.1\n */\n\nimport Config from 'core/config';\nimport {displayException, addNotification} from 'core/notification';\nimport ModalFactory from 'core/modal_factory';\nimport {get_string as getString} from 'core/str';\nimport Prefetch from 'core/prefetch';\nimport * as Templates from 'core/templates';\nimport ShareModalActivity from \"tool_moodlenet/share_modal_activity\";\nimport ShareModalCourse from \"tool_moodlenet/share_modal_course\";\nimport * as MoodleNetSelectors from 'tool_moodlenet/selectors';\nimport * as MoodleNetRepository from 'tool_moodlenet/repository';\n\nlet currentModal;\n\n/**\n * Handle send to MoodleNet\n * @param {boolean} status\n */\nconst sendToMoodleNet = (status) => {\n    const $modal = currentModal.getModal();\n    const modal = $modal[0];\n    modal.querySelector('.modal-header').classList.remove('no-border');\n\n    currentModal.setBody(Templates.render('tool_moodlenet/share_modal_content_packaging', {}));\n    currentModal.hideFooter();\n\n    setTimeout(() => {\n        moodleNetDone(status);\n    }, 5000);\n};\n\n/**\n * Handle done status.\n * @param {boolean} status\n */\nconst moodleNetDone = (status) => {\n    const $modal = currentModal.getModal();\n    const modal = $modal[0];\n    modal.querySelector('.modal-header').classList.add('hidden');\n    modal.querySelector('.modal-body').classList.add('pt-0');\n    currentModal.setBody(Templates.render('tool_moodlenet/share_modal_content_done', {\n        success: status\n    }));\n};\n\n/**\n * Handle activity chooser.\n */\nconst handleActivityChooser = () => {\n    const $modal = currentModal.getModal();\n    const modal = $modal[0];\n    const activityCount = modal.querySelector('.total-activities');\n    const activityCheckboxes = modal.querySelectorAll('[data-action=\"choose-activity\"]');\n    const activityCheckeds = [].filter.call(activityCheckboxes, (el) => {\n        return el.checked;\n    });\n    getString('selected_activities_no', 'tool_moodlenet', activityCheckeds.length).then((str) => {\n        activityCount.innerHTML = str;\n    });\n};\n\n/**\n * Register events.\n */\nconst registerEventListeners = () => {\n    document.addEventListener('click', e => {\n        const shareAction = e.target.closest(MoodleNetSelectors.action.share);\n        const shareToSuccessAction = e.target.closest('[data-action=\"share-success\"]');\n        const shareToFailAction = e.target.closest('[data-action=\"share-fail\"]');\n        const chooseActivityAction = e.target.closest('[data-action=\"choose-activity\"]');\n        if (shareAction) {\n            e.preventDefault();\n            const type = shareAction.getAttribute('data-type');\n            if (type == 'activity') {\n                const cmId = Config.contextInstanceId;\n                MoodleNetRepository.getActivityInformation(cmId).then((data) => {\n                    if (data.status) {\n                        const modalPromise = ModalFactory.create({\n                            type: ShareModalActivity.TYPE,\n                            large: true,\n                            templateContext: {\n                                'activitytype': data.type,\n                                'activityname': data.name,\n                                'server': data.server,\n                            }\n                        });\n\n                        return modalPromise.then(modal => {\n                            currentModal = modal;\n                            modal.show();\n                            return modal;\n                        }).catch(displayException);\n                    } else {\n                        return addNotification({\n                            message: data.warnings[0].message,\n                            type: 'error'\n                        });\n                    }\n                }).catch(displayException);\n            } else if (type == 'course') {\n                const courseId = Config.courseId;\n                MoodleNetRepository.getCourseActivitiesInformation(courseId).then((data) => {\n                    if (data.status) {\n                        const modalPromise = ModalFactory.create({\n                            type: ShareModalCourse.TYPE,\n                            large: true,\n                            templateContext: {\n                                'coursename': data.name,\n                                'activities': data.activities,\n                                'server': data.server,\n                            }\n                        });\n\n                        return modalPromise.then(modal => {\n                            currentModal = modal;\n                            modal.show();\n                            return modal;\n                        }).catch(displayException);\n                    } else {\n                        return addNotification({\n                            message: data.warnings[0].message,\n                            type: 'error'\n                        });\n                    }\n                }).catch(displayException);\n            }\n        }\n\n        if (shareToSuccessAction) {\n            e.preventDefault();\n            sendToMoodleNet(true);\n        }\n        if (shareToFailAction) {\n            e.preventDefault();\n            sendToMoodleNet(false);\n        }\n        if (chooseActivityAction) {\n            handleActivityChooser();\n        }\n    });\n};\n\n/**\n * Initialises.\n */\nexport const init = () => {\n    Prefetch.prefetchString('tool_moodlenet', 'selected_activities_no');\n    Prefetch.prefetchTemplates([\n        'tool_moodlenet/share_modal_activity',\n        'tool_moodlenet/share_modal_course',\n        'tool_moodlenet/share_modal_content_done',\n        'tool_moodlenet/share_modal_content_packaging',\n    ]);\n    registerEventListeners();\n};\n"],"names":["currentModal","sendToMoodleNet","status","getModal","querySelector","classList","remove","setBody","Templates","render","hideFooter","setTimeout","moodleNetDone","modal","add","success","registerEventListeners","document","addEventListener","e","shareAction","target","closest","MoodleNetSelectors","action","share","shareToSuccessAction","shareToFailAction","chooseActivityAction","preventDefault","type","getAttribute","cmId","Config","contextInstanceId","MoodleNetRepository","getActivityInformation","then","data","ModalFactory","create","ShareModalActivity","TYPE","large","templateContext","name","server","show","catch","displayException","message","warnings","courseId","getCourseActivitiesInformation","ShareModalCourse","activities","activityCount","activityCheckboxes","querySelectorAll","activityCheckeds","filter","call","el","checked","length","str","innerHTML","handleActivityChooser","prefetchString","prefetchTemplates"],"mappings":";;;;;;;;SAmCIA,2hBAMEC,gBAAmBC,SACNF,aAAaG,WACP,GACfC,cAAc,iBAAiBC,UAAUC,OAAO,aAEtDN,aAAaO,QAAQC,UAAUC,OAAO,+CAAgD,KACtFT,aAAaU,aAEbC,YAAW,KACPC,cAAcV,UACf,MAODU,cAAiBV,eAEbW,MADSb,aAAaG,WACP,GACrBU,MAAMT,cAAc,iBAAiBC,UAAUS,IAAI,UACnDD,MAAMT,cAAc,eAAeC,UAAUS,IAAI,QACjDd,aAAaO,QAAQC,UAAUC,OAAO,0CAA2C,CAC7EM,QAASb,WAuBXc,uBAAyB,KAC3BC,SAASC,iBAAiB,SAASC,UACzBC,YAAcD,EAAEE,OAAOC,QAAQC,mBAAmBC,OAAOC,OACzDC,qBAAuBP,EAAEE,OAAOC,QAAQ,iCACxCK,kBAAoBR,EAAEE,OAAOC,QAAQ,8BACrCM,qBAAuBT,EAAEE,OAAOC,QAAQ,sCAC1CF,YAAa,CACbD,EAAEU,uBACIC,KAAOV,YAAYW,aAAa,gBAC1B,YAARD,KAAoB,OACdE,KAAOC,gBAAOC,kBACpBC,oBAAoBC,uBAAuBJ,MAAMK,MAAMC,UAC/CA,KAAKpC,OAAQ,QACQqC,uBAAaC,OAAO,CACrCV,KAAMW,8BAAmBC,KACzBC,OAAO,EACPC,gBAAiB,cACGN,KAAKR,kBACLQ,KAAKO,YACXP,KAAKQ,UAIHT,MAAKxB,QACrBb,aAAea,MACfA,MAAMkC,OACClC,SACRmC,MAAMC,uCAEF,iCAAgB,CACnBC,QAASZ,KAAKa,SAAS,GAAGD,QAC1BpB,KAAM,aAGfkB,MAAMC,qCACN,GAAY,UAARnB,KAAkB,OACnBsB,SAAWnB,gBAAOmB,SACxBjB,oBAAoBkB,+BAA+BD,UAAUf,MAAMC,UAC3DA,KAAKpC,OAAQ,QACQqC,uBAAaC,OAAO,CACrCV,KAAMwB,4BAAiBZ,KACvBC,OAAO,EACPC,gBAAiB,YACCN,KAAKO,gBACLP,KAAKiB,kBACTjB,KAAKQ,UAIHT,MAAKxB,QACrBb,aAAea,MACfA,MAAMkC,OACClC,SACRmC,MAAMC,uCAEF,iCAAgB,CACnBC,QAASZ,KAAKa,SAAS,GAAGD,QAC1BpB,KAAM,aAGfkB,MAAMC,iCAIbvB,uBACAP,EAAEU,iBACF5B,iBAAgB,IAEhB0B,oBACAR,EAAEU,iBACF5B,iBAAgB,IAEhB2B,sBAxFkB,YAEpBf,MADSb,aAAaG,WACP,GACfqD,cAAgB3C,MAAMT,cAAc,qBACpCqD,mBAAqB5C,MAAM6C,iBAAiB,mCAC5CC,iBAAmB,GAAGC,OAAOC,KAAKJ,oBAAqBK,IAClDA,GAAGC,8BAEJ,yBAA0B,iBAAkBJ,iBAAiBK,QAAQ3B,MAAM4B,MACjFT,cAAcU,UAAYD,QAgFtBE,qBAQQ,uBACPC,eAAe,iBAAkB,4CACjCC,kBAAkB,CACvB,sCACA,oCACA,0CACA,iDAEJrD"}